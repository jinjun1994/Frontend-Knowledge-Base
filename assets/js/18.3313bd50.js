(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{78:function(s,a,t){"use strict";t.r(a);var e=t(3),n=Object(e.a)({},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"创建代码仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建代码仓库","aria-hidden":"true"}},[s._v("#")]),s._v(" 创建代码仓库")]),s._v(" "),t("blockquote",[t("p",[s._v("BY 童仲毅("),t("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[s._v("geeeeeeeeek@github"),t("OutboundLink")],1),s._v(")")]),s._v(" "),t("p",[s._v("这是一篇在"),t("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/setting-up-a-repository",target:"_blank",rel:"noopener noreferrer"}},[s._v("原文(BY atlassian)"),t("OutboundLink")],1),s._v("基础上演绎的译文。除非另行注明，页面上所有内容采用知识共享-署名("),t("a",{attrs:{href:"http://creativecommons.org/licenses/by/2.5/au/deed.zh",target:"_blank",rel:"noopener noreferrer"}},[s._v("CC BY 2.5 AU"),t("OutboundLink")],1),s._v(")协议共享。")])]),s._v(" "),t("p",[s._v("这一章简要地带你了解一些最重要的 Git 命令。在这节中，我会向你介绍开始一个新的版本控制项目需要的所有工具，后面的几节包含了你每天都会用到的Git操作。")]),s._v(" "),t("p",[s._v("在这节之后，你应该能够创建一个新的 Git 仓库，缓存你的项目以免丢失，以及查看你项目的历史。")]),s._v(" "),t("h2",{attrs:{id:"git-init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-init","aria-hidden":"true"}},[s._v("#")]),s._v(" git init")]),s._v(" "),t("p",[t("code",[s._v("git init")]),s._v(" 命令创建一个新的 Git 仓库。它用来将已存在但还没有版本控制的项目转换成一个 Git 仓库，或者创建一个空的新仓库。大多数Git命令在未初始化的仓库中都是无法使用的，所以这就是你运行新项目的第一个命令了。")]),s._v(" "),t("p",[s._v("运行 "),t("code",[s._v("git init")]),s._v(" 命令会在你项目的根目录下创建一个新的 "),t("code",[s._v(".git")]),s._v(" 目录，其中包含了你项目必需的所有元数据。除了 "),t("code",[s._v(".git")]),s._v(" 目录之外，已经存在的项目不会被改变（就像 SVN 一样，Git 不强制每个子目录中都有一个 "),t("code",[s._v(".git")]),s._v(" 目录）。")]),s._v(" "),t("h3",{attrs:{id:"用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用法","aria-hidden":"true"}},[s._v("#")]),s._v(" 用法")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("将当前的目录转换成一个 Git 仓库。它在当前的目录下增加了一个 "),t("code",[s._v(".git")]),s._v(" 目录，于是就可以开始记录项目版本了。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("directory"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 "),t("code",[s._v("directory")]),s._v("，只包含 "),t("code",[s._v(".git")]),s._v(" 子目录的空目录。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init --bare "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("directory"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("初始化一个裸的 Git 仓库，但是忽略工作目录。共享的仓库应该总是用 "),t("code",[s._v("--bare")]),s._v(" 标记创建（见下面的讨论）。一般来说，用 "),t("code",[s._v("—bare")]),s._v(" 标记初始化的仓库以 "),t("code",[s._v(".git")]),s._v(" 结尾。比如，一个叫"),t("code",[s._v("my-project")]),s._v("的仓库，它的空版本应该保存在 "),t("code",[s._v("my-project.git")]),s._v(" 目录下。")]),s._v(" "),t("h3",{attrs:{id:"讨论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讨论","aria-hidden":"true"}},[s._v("#")]),s._v(" 讨论")]),s._v(" "),t("p",[s._v("和 SVN 相比，"),t("code",[s._v("git init")]),s._v(" 命令是一个创建新的版本控制项目非常简单的途径。Git 不需要你创建仓库，导入文件，检查正在修改的拷贝。你只需要 "),t("code",[s._v("cd")]),s._v(" 到你的项目目录下，运行 "),t("code",[s._v("git init")]),s._v("，你就有了一个功能强大的 Git 仓库。")]),s._v(" "),t("p",[s._v("但是，对大多数项目来说，"),t("code",[s._v("git init")]),s._v(" 只需要在创建中央仓库时执行一次——开发者通常不会使用 "),t("code",[s._v("git init")]),s._v(" 来创建他们的本地仓库。他们往往使用 "),t("code",[s._v("git clone")]),s._v(" 来将已存在的仓库拷贝到他们的机器中去。")]),s._v(" "),t("h4",{attrs:{id:"裸仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#裸仓库","aria-hidden":"true"}},[s._v("#")]),s._v(" 裸仓库")]),s._v(" "),t("p",[t("code",[s._v("-—bare")]),s._v(" 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将"),t("code",[s._v("-—bare")]),s._v("看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://www.atlassian.com/dam/jcr:88f08a3d-f34e-4c8e-974c-a01f25b2eca1/01.svg",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"栗子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栗子","aria-hidden":"true"}},[s._v("#")]),s._v(" 栗子")]),s._v(" "),t("p",[s._v("因为 "),t("code",[s._v("git clone")]),s._v(" 创建项目的本地拷贝更为方便，"),t("code",[s._v("git init")]),s._v(" 最常见的使用情景就是用于创建中央仓库：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("host"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cd")]),s._v(" path/above/repo\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init --bare my-project.git\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("首先，你用SSH连入存放中央仓库的服务器。然后，来到任何你想存放项目的地方，最后，使用 "),t("code",[s._v("-—bare")]),s._v(" 标记来创建一个中央存储仓库。开发者会将 "),t("code",[s._v("my-project.git")]),s._v(" 克隆到本地的开发环境中。")]),s._v(" "),t("h2",{attrs:{id:"git-clone"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-clone","aria-hidden":"true"}},[s._v("#")]),s._v(" git clone")]),s._v(" "),t("p",[t("code",[s._v("git clone")]),s._v(" 命令拷贝整个 Git 仓库。这个命令就像 "),t("code",[s._v("svn checkout")]),s._v(" 一样，除了「工作副本」是一个完备的Git仓库——它包含自己的历史，管理自己的文件，以及环境和原仓库完全隔离。")]),s._v(" "),t("p",[s._v("为了方便起见，"),t("code",[s._v("clone")]),s._v(" 自动创建了一个名为 "),t("code",[s._v("origin")]),s._v(" 的远程连接，指向原有仓库。这让和中央仓库之间的交互更加简单。")]),s._v(" "),t("h3",{attrs:{id:"用法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用法-2","aria-hidden":"true"}},[s._v("#")]),s._v(" 用法")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("repo"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("将位于 "),t("code",[s._v("<repo>")]),s._v(" 的仓库克隆到本地机器。原仓库可以在本地文件系统中，或是通过 HTTP 或 SSH 连接的远程机器。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("repo"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("directory"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("将位于 "),t("code",[s._v("<repo>")]),s._v(" 的仓库克隆到本地机器上的 "),t("code",[s._v("<directory>")]),s._v(" 目录。")]),s._v(" "),t("h3",{attrs:{id:"讨论-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讨论-2","aria-hidden":"true"}},[s._v("#")]),s._v(" 讨论")]),s._v(" "),t("p",[s._v("如果项目在远程仓库已经设置完毕，"),t("code",[s._v("git clone")]),s._v(" 是用户获取开发副本最常见的方式。和  "),t("code",[s._v("git init")]),s._v("相似，"),t("code",[s._v("clone")]),s._v(" 通常也是一次性的操作——只要开发者获得了一份工作副本，所有版本控制操作和协作管理都是在本地仓库中完成的。")]),s._v(" "),t("h4",{attrs:{id:"仓库间协作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#仓库间协作","aria-hidden":"true"}},[s._v("#")]),s._v(" 仓库间协作")]),s._v(" "),t("p",[s._v("这一点很重要，你要理解 Git 中「工作副本」的概念和 SVN 仓库 check out 下来的「工作副本」是很不一样的。和 SVN 不同的是，Git 不会区分工作副本和中央仓库——它们都是功能完备的 Git 仓库。")]),s._v(" "),t("p",[s._v("这就使得 Git 的协作和 SVN 截然不同。SVN 依赖于中央仓库和工作副本之间的关系，而 Git 协作模型是基于仓库和仓库之间的交互的。相对于 SVN 的提交流程，你可以在 Git 仓库之间 "),t("code",[s._v("push")]),s._v(" 或 "),t("code",[s._v("pull")]),s._v(" 提交。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://www.atlassian.com/dam/jcr:e5228129-76b1-4b2c-8f10-af789f2ea6c0/03.svg",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://www.atlassian.com/dam/jcr:5d68ce55-59a7-4840-a896-eb2014a9f17b/02.svg",alt:""}})]),s._v(" "),t("p",[s._v("当然，你也完全可以给予某个特定的仓库一些特殊的含义。比如，指定某个 Git 仓库为中央仓库，你就可以用 Git 进行中央化的工作流。重点是，这是通过约定实现的，而不是写死在版本控制系统本身。")]),s._v(" "),t("h3",{attrs:{id:"栗子-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栗子-2","aria-hidden":"true"}},[s._v("#")]),s._v(" 栗子")]),s._v(" "),t("p",[s._v("下面这个例子演示用 SSH 用户名 john 连接到 example.com，获取远程服务器上中央仓库的本地副本：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone ssh://john@example.com/path/to/my-project.git\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cd")]),s._v(" my-project\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开始工作")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("第一行命令在本地机器的 "),t("code",[s._v("my-project")]),s._v(" 目录下初始化了一个新的 Git 仓库，并且导入了中央仓库中的文件。接下来，你 "),t("code",[s._v("cd")]),s._v(" 到项目目录，开始编辑文件、缓存提交、和其它仓库交互。同时注意 "),t("code",[s._v(".git")]),s._v(" 拓展名克隆时会被去除。它表明了本地副本的非裸状态。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("code",[s._v("git config")]),s._v(" 命令允许你在命令行中配置你的 Git 安装（或是一个独立仓库）。这个命令定义了所有配置，从用户信息到仓库行为等等。一些常见的配置命令如下所列。")]),s._v(" "),t("h3",{attrs:{id:"用法-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用法-3","aria-hidden":"true"}},[s._v("#")]),s._v(" 用法")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("定义当前仓库所有提交使用的作者姓名。通常来说，你希望使用 "),t("code",[s._v("--global")]),s._v(" 标记设置当前用户的配置项。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("定义当前用户所有提交使用的作者姓名。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.email "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("email"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("定义当前用户所有提交使用的作者邮箱。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global alias."),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("alias-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("git-command"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("为Git命令创建一个快捷方式（别名）。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --system core.editor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("editor"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("定义当前机器所有用户使用命令时用到的文本编辑器，如 "),t("code",[s._v("git commit")]),s._v("。"),t("code",[s._v("<editor>")]),s._v(" 参数用编辑器的启动命令（如 vi）替代。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global --edit\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("用文本编辑器打开全局配置文件，手动编辑。")]),s._v(" "),t("h3",{attrs:{id:"讨论-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讨论-3","aria-hidden":"true"}},[s._v("#")]),s._v(" 讨论")]),s._v(" "),t("p",[s._v("所有配置项都储存在纯文本文件中，所以 "),t("code",[s._v("git config")]),s._v(" 命令其实只是一个提供便捷的命令行接口。通常，你只需要在新机器上配置一次 Git 安装，以及，你通常会想要使用 "),t("code",[s._v("--global")]),s._v(" 标记。")]),s._v(" "),t("p",[s._v("Git 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。")]),s._v(" "),t("ul",[t("li",[t("p",[t("repo",[s._v("/.git/config – 特定仓库的设置。")])],1)]),s._v(" "),t("li",[t("p",[s._v("~/.gitconfig – 特定用户的设置。这也是 "),t("code",[s._v("--global")]),s._v(" 标记的设置项存放的位置。")])]),s._v(" "),t("li",[t("p",[s._v("$(prefix)/etc/gitconfig – 系统层面的设置。")])])]),s._v(" "),t("p",[s._v("当这些文件中的配置项冲突时，本地仓库设置覆盖用户设置，用户设置覆盖系统设置。如果你打开期中一份文件，你会看到下面这些：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\nname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" John Smith\n\nemail "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" john@example.com\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("alias"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\nst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" status\n\nco "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" checkout\n\nbr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" branch\n\nup "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" rebase\n\nci "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" commit\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("core"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\neditor "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" vim\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("你可以用 "),t("code",[s._v("git config")]),s._v(" 手动编辑这些值。")]),s._v(" "),t("h3",{attrs:{id:"栗子-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栗子-3","aria-hidden":"true"}},[s._v("#")]),s._v(" 栗子")]),s._v(" "),t("p",[s._v("你在安装 Git 之后想要做的第一件事是告诉它你的名字和邮箱，个性化一些默认设置。一般初始的设置过程看上去是这样的：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 告诉Git你是谁")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John Smith"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.email john@example.com\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 选择你喜欢的文本编辑器")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.editor vim\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加一些快捷方式(别名)")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global alias.st status\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global alias.co checkout\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global alias.br branch\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global alias.up rebase\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global alias.ci commit\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("它会生成上一节中所说的 "),t("code",[s._v("~/.gitconfig")]),s._v(" 文件。")]),s._v(" "),t("blockquote",[t("p",[s._v("这篇文章是"),t("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[s._v("「git-recipes」")]),t("OutboundLink")],1),s._v("的一部分，点击 "),t("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/wiki/",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[s._v("目录")]),t("OutboundLink")],1),s._v(" 查看所有章节。")]),s._v(" "),t("p",[s._v("如果你觉得文章对你有帮助，欢迎点击右上角的 "),t("strong",[s._v("Star")]),s._v(" 🌟 或 "),t("strong",[s._v("Fork")]),s._v(" 🍴。")]),s._v(" "),t("p",[s._v("如果你发现了错误，或是想要加入协作，请参阅 "),t("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/issues/1",target:"_blank",rel:"noopener noreferrer"}},[s._v("Wiki 协作说明"),t("OutboundLink")],1),s._v("。")])])])},[],!1,null,null,null);a.default=n.exports}}]);