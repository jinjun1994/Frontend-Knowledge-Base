(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{81:function(e,t,a){"use strict";a.r(t);var s=a(3),r=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"检出之前的提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检出之前的提交","aria-hidden":"true"}},[e._v("#")]),e._v(" 检出之前的提交")]),e._v(" "),a("blockquote",[a("p",[e._v("BY 童仲毅（"),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("geeeeeeeeek@github"),a("OutboundLink")],1),e._v("）")]),e._v(" "),a("p",[e._v("这是一篇在"),a("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/viewing-old-commits",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文（BY atlassian）"),a("OutboundLink")],1),e._v("基础上演绎的译文。除非另行注明，页面上所有内容采用知识共享-署名（"),a("a",{attrs:{href:"http://creativecommons.org/licenses/by/2.5/au/deed.zh",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC BY 2.5 AU"),a("OutboundLink")],1),e._v("）协议共享。")])]),e._v(" "),a("h2",{attrs:{id:"git-checkout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout","aria-hidden":"true"}},[e._v("#")]),e._v(" git checkout")]),e._v(" "),a("p",[a("code",[e._v("git checkout")]),e._v(" 这个命令有三个不同的作用：检出文件、检出提交和检出分支。在这一章中，我们只关心前两种用法。")]),e._v(" "),a("p",[e._v("检出提交会使工作目录和这个提交完全匹配。你可以用它来查看项目之前的状态，而不改变当前的状态。检出文件使你能够查看某个特定文件的旧版本，而工作目录中剩下的文件不变。")]),e._v(" "),a("h3",{attrs:{id:"用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法","aria-hidden":"true"}},[e._v("#")]),e._v(" 用法")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout master\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("回到 master 分支。分支会在下一节中讲到，而现在，你只需要将它视为回到项目「当前」状态的一种方式。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout <commit> <file>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("查看文件之前的版本。它将工作目录中的 "),a("code",[e._v("<file>")]),e._v(" 文件变成 "),a("code",[e._v("<commit>")]),e._v(" 中那个文件的拷贝，并将它加入缓存区。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout <commit>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("更新工作目录中的所有文件，使得和某个特定提交中的文件一致。你可以将提交的哈希字串，或是标签作为 "),a("code",[e._v("<commit>")]),e._v(" 参数。这会使你处在分离 HEAD 的状态。")]),e._v(" "),a("h3",{attrs:{id:"讨论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讨论","aria-hidden":"true"}},[e._v("#")]),e._v(" 讨论")]),e._v(" "),a("p",[e._v("版本控制系统背后的思想就是「安全」地储存项目的拷贝，这样你永远不用担心什么时候不可复原地破坏了你的代码库。当你建立了项目历史之后，"),a("code",[e._v("git checkout")]),e._v(" 是一种便捷的方式，来将保存的快照「加载」到你的开发机器上去。")]),e._v(" "),a("p",[e._v("检出之前的提交是一个只读操作。在查看旧版本的时候绝不会损坏你的仓库。你项目「当前」的状态在\t"),a("code",[e._v("master")]),e._v(" 上不会变化。在开发的正常阶段，"),a("code",[e._v("HEAD")]),e._v(" 一般指向 master 或是其他的本地分支，但当你检出之前提交的时候，"),a("code",[e._v("HEAD")]),e._v(" 就不再指向一个分支了——它直接指向一个提交。这被称为「分离 "),a("code",[e._v("HEAD")]),e._v("」状态 ，可以用下图可视化：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/01.svg",alt:"Git Tutorial: Checking out a previous commit"}})]),e._v(" "),a("p",[e._v("在另一方面，检出旧文件不影响你仓库的当前状态。你可以在新的快照中像其他文件一样重新提交旧版本。所以，在效果上，"),a("code",[e._v("git checkout")]),e._v(" 的这个用法可以用来将单个文件回滚到旧版本 。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://www.atlassian.com/git/images/tutorials/getting-started/viewing-old-commits/02.svg",alt:"Git Training: Checking out a previous version of a file"}})]),e._v(" "),a("h3",{attrs:{id:"栗子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栗子","aria-hidden":"true"}},[e._v("#")]),e._v(" 栗子")]),e._v(" "),a("h4",{attrs:{id:"查看之前的版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看之前的版本","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看之前的版本")]),e._v(" "),a("p",[e._v("这个栗子假定你开始了一个疯狂的实验，但你不确定你是否想要保留它。为了帮助你决定，你想看一看你开始实验之前的项目状态。首先，你需要找到你想要看的那个版本的 ID。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git log --oneline\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("假设你的项目历史看上去和下面一样：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("b7119f2 继续做些丧心病狂的事\n872fa7e 做些丧心病狂的事\na1e8fb5 对 hello.py 做了一些修改\n435b61d 创建 hello.py\n9773e52 初始导入\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("你可以这样使用 "),a("code",[e._v("git checkout")]),e._v(" 来查看「对 hello.py 做了一些修改」这个提交：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout a1e8fb5\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("这让你的工作目录和 "),a("code",[e._v("a1e8fb5")]),e._v(" 提交所处的状态完全一致。你可以查看文件，编译项目，运行测试，甚至编辑文件而不需要考虑是否会影响项目的当前状态。你所做的一切 "),a("em",[e._v("都不会")]),e._v(" 被保存到仓库中。为了继续开发，你需要回到你项目的「当前」状态：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout master\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("这里假定了你默认在 master 分支上开发，我们会在以后的分支模型中详细讨论。")]),e._v(" "),a("p",[e._v("一旦你回到 master 分支之后，你可以使用 "),a("code",[e._v("git revert")]),e._v(" 或 "),a("code",[e._v("git reset")]),e._v(" 来回滚任何不想要的更改。")]),e._v(" "),a("h4",{attrs:{id:"检出文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检出文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 检出文件")]),e._v(" "),a("p",[e._v("如果你只对某个文件感兴趣，你也可以用 "),a("code",[e._v("git checkout")]),e._v(" 来获取它的一个旧版本。比如说，如果你只想从之前的提交中查看 "),a("code",[e._v("hello.py")]),e._v(" 文件，你可以使用下面的命令：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout a1e8fb5 hello.py\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("记住，和检出提交不同，这里 "),a("em",[e._v("确实")]),e._v(" 会影响你项目的当前状态。旧的文件版本会显示为「需要提交的更改」，允许你回滚到文件之前的版本。如果你不想保留旧的版本，你可以用下面的命令检出到最近的版本：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout HEAD hello.py\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("blockquote",[a("p",[e._v("这篇文章是"),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[e._v("「git-recipes」")]),a("OutboundLink")],1),e._v("的一部分，点击 "),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/wiki/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[e._v("目录")]),a("OutboundLink")],1),e._v(" 查看所有章节。")]),e._v(" "),a("p",[e._v("如果你觉得文章对你有帮助，欢迎点击右上角的 "),a("strong",[e._v("Star")]),e._v(" 🌟 或 "),a("strong",[e._v("Fork")]),e._v(" 🍴。")]),e._v(" "),a("p",[e._v("如果你发现了错误，或是想要加入协作，请参阅 "),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/issues/1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wiki 协作说明"),a("OutboundLink")],1),e._v("。")])])])},[],!1,null,null,null);t.default=r.exports}}]);