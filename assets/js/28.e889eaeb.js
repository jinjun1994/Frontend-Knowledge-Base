(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{88:function(e,t,_){"use strict";_.r(t);var r=_(3),i=Object(r.a)({},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"git-图解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-图解","aria-hidden":"true"}},[e._v("#")]),e._v(" Git 图解")]),e._v(" "),_("blockquote",[_("p",[e._v("BY 童仲毅（"),_("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("geeeeeeeeek@github"),_("OutboundLink")],1),e._v("）")]),e._v(" "),_("p",[e._v("这是一篇在"),_("a",{attrs:{href:"http://marklodato.github.io/visual-git-guide/index-zh-cn.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文"),_("OutboundLink")],1),e._v("基础上演绎的文章。原作者 "),_("a",{attrs:{href:"lodatom@gmail.com"}},[e._v("Mark Lodato")]),e._v("，译者 "),_("a",{attrs:{href:"ellrywych@gmail.com"}},[e._v("wych")]),e._v("。原文采用"),_("a",{attrs:{href:"https://creativecommons.org/licenses/by-nc-sa/3.0/us/",target:"_blank",rel:"noopener noreferrer"}},[e._v("创用 CC 姓名标示-非商业性-相同方式分享 3.0 美国授权条款"),_("OutboundLink")],1),e._v("授权。")])]),e._v(" "),_("p",[e._v("此页图解 git 中的最常用命令。如果你稍微理解 git 的工作原理，这篇文章能够让你理解的更透彻。")]),e._v(" "),_("h2",{attrs:{id:"基本用法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本用法","aria-hidden":"true"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/basic-usage.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("上面的四条命令在工作目录、stage 缓存(也叫做索引)和 commit 历史之间复制文件。")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("git add files")]),e._v(" 把工作目录中的文件加入 stage 缓存")]),e._v(" "),_("li",[_("code",[e._v("git commit")]),e._v(" 把 stage 缓存生成一次 commit，并加入 commit 历史")]),e._v(" "),_("li",[_("code",[e._v("git reset -- files")]),e._v(" 撤销最后一次 "),_("code",[e._v("git add files")]),e._v("，你也可以用 "),_("code",[e._v("git reset")]),e._v(" 撤销所有 stage 缓存文件")]),e._v(" "),_("li",[_("code",[e._v("git checkout -- files")]),e._v(" 把文件从 stage 缓存复制到工作目录，用来丢弃本地修改")])]),e._v(" "),_("p",[e._v("你可以用 "),_("code",[e._v("git reset -p")]),e._v("、"),_("code",[e._v("git checkout -p")]),e._v(" 或 "),_("code",[e._v("git add -p")]),e._v(" 进入交互模式，也可以跳过 stage 缓存直接从  commit历史取出文件或者直接提交代码。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/basic-usage-2.svg",alt:"enter image description here"}})]),e._v(" "),_("ul",[_("li",[_("code",[e._v("git commit -a")]),e._v(" 相当于运行 "),_("code",[e._v("git add")]),e._v(" 把所有当前目录下的文件加入 stage 缓存再运行 "),_("code",[e._v("git commit")]),e._v("。")]),e._v(" "),_("li",[_("code",[e._v("git commit files")]),e._v(" 进行一次包含最后一次提交加上工作目录中文件快照的提交，并且文件被添加到 stage 缓存。")]),e._v(" "),_("li",[_("code",[e._v("git checkout HEAD -- files")]),e._v(" 回滚到复制最后一次提交。")])]),e._v(" "),_("h2",{attrs:{id:"约定"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#约定","aria-hidden":"true"}},[e._v("#")]),e._v(" 约定")]),e._v(" "),_("p",[e._v("后文中以下面的形式使用图片：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/conventions.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("绿色的5位字符表示提交的 ID，分别指向父节点。分支用橙色显示，分别指向特定的提交。当前分支由附在其上的 "),_("code",[e._v("_HEAD_")]),e._v(" 标识。")]),e._v(" "),_("p",[e._v("这张图片里显示最后 5 次提交，"),_("code",[e._v("_ed489_")]),e._v(" 是最新提交。 "),_("code",[e._v("_master_")]),e._v(" 分支指向此次提交，另一个 "),_("code",[e._v("_maint_")]),e._v(" 分支指向祖父提交节点。")]),e._v(" "),_("h2",{attrs:{id:"命令详解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命令详解","aria-hidden":"true"}},[e._v("#")]),e._v(" 命令详解")]),e._v(" "),_("h3",{attrs:{id:"diff"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#diff","aria-hidden":"true"}},[e._v("#")]),e._v(" Diff")]),e._v(" "),_("p",[e._v("有许多种方法查看两次提交之间的变动，下面是其中一些例子。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/diff.svg",alt:"enter image description here"}})]),e._v(" "),_("h3",{attrs:{id:"commit"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#commit","aria-hidden":"true"}},[e._v("#")]),e._v(" Commit")]),e._v(" "),_("p",[e._v("提交时，Git 用 stage 缓存中的文件创建一个新的提交，并把此时的节点设为父节点。然后把当前分支指向新的提交节点。下图中，当前分支是 "),_("code",[e._v("_master_")]),e._v("。")]),e._v(" "),_("p",[e._v("在运行命令之前，"),_("code",[e._v("_master_")]),e._v(" 指向 "),_("code",[e._v("_ed489_")]),e._v("，提交后，"),_("code",[e._v("_master_")]),e._v(" 指向新的节点"),_("code",[e._v("_f0cec_")]),e._v(" 并以 "),_("code",[e._v("_ed489_")]),e._v(" 作为父节点。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/commit-master.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("即便当前分支是某次提交的祖父节点，Git 会同样操作。下图中，在 "),_("code",[e._v("_master_")]),e._v(" 分支的祖父节点 "),_("code",[e._v("_maint_")]),e._v(" 分支进行一次提交，生成了 "),_("code",[e._v("_1800b_")]),e._v("。")]),e._v(" "),_("p",[e._v("这样，"),_("code",[e._v("_maint_")]),e._v("分支就不再是 "),_("code",[e._v("_master_")]),e._v(" 分支的祖父节点。此时，"),_("a",{attrs:{href:"#merge"}},[e._v("merge")]),e._v(" 或者 "),_("a",{attrs:{href:"#rebase"}},[e._v("rebase")]),e._v(" 是必须的。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/commit-maint.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("如果想更改一次提交，使用 "),_("code",[e._v("git commit --amend")]),e._v("。Git 会使用与当前提交相同的父节点进行一次新提交，旧的提交会被取消。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/commit-amend.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("另一个例子是"),_("a",{attrs:{href:"#detached"}},[e._v("分离HEAD提交")]),e._v("，在后面的章节中介绍。")]),e._v(" "),_("h3",{attrs:{id:"checkout"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#checkout","aria-hidden":"true"}},[e._v("#")]),e._v(" Checkout")]),e._v(" "),_("p",[_("code",[e._v("git checkout")]),e._v(" 命令用于从历史提交（或者 stage 缓存）中拷贝文件到工作目录，也可用于切换分支。")]),e._v(" "),_("p",[e._v("当给定某个文件名（或者打开 "),_("code",[e._v("-p")]),e._v(" 选项，或者文件名和-p选项同时打开）时，Git 会从指定的提交中拷贝文件到 stage 缓存和工作目录。比如，"),_("code",[e._v("git checkout HEAD~ foo.c")]),e._v(" 会将提交节点 "),_("code",[e._v("_HEAD~_")]),e._v("（即当前提交节点的父节点）中的 "),_("code",[e._v("foo.c")]),e._v(" 复制到工作目录并且加到 stage 缓存中。如果命令中没有指定提交节点，则会从 stage 缓存中拷贝内容。注意当前分支不会发生变化。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/checkout-files.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("当不指定文件名，而是给出一个（本地）分支时，那么 "),_("code",[e._v("_HEAD_")]),e._v(" 标识会移动到那个分支（也就是说，我们「切换」到那个分支了），然后 stage 缓存和工作目录中的内容会和 "),_("code",[e._v("_HEAD_")]),e._v(" 对应的提交节点一致。新提交节点（下图中的 "),_("code",[e._v("a47c3")]),e._v("）中的所有文件都会被复制（到 stage 缓存和工作目录中）；只存在于老的提交节点（"),_("code",[e._v("ed489")]),e._v("）中的文件会被删除；不属于上述两者的文件会被忽略，不受影响。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/checkout-branch.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("如果既没有指定文件名，也没有指定分支名，而是一个标签、远程分支、SHA-1 值或者是像 "),_("code",[e._v("_master~3_")]),e._v(" 类似的东西，就得到一个匿名分支，称作 "),_("code",[e._v("_detached HEAD_")]),e._v("（被分离的 "),_("code",[e._v("_HEAD_")]),e._v(" 标识）。这样可以很方便地在历史版本之间互相切换。比如说你想要编译 1.6.6.1 版本的 Git，你可以运行 "),_("code",[e._v("git checkout v1.6.6.1")]),e._v("（这是一个标签，而非分支名），编译，安装，然后切换回另一个分支，比如说 "),_("code",[e._v("git checkout master")]),e._v("。然而，当提交操作涉及到「分离的 HEAD」时，其行为会略有不同，详情见在"),_("a",{attrs:{href:"#detached"}},[e._v("下面")]),e._v("。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/checkout-detached.svg",alt:"enter image description here"}})]),e._v(" "),_("h3",{attrs:{id:"head-标识处于分离状态时的提交操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#head-标识处于分离状态时的提交操作","aria-hidden":"true"}},[e._v("#")]),e._v(" HEAD 标识处于分离状态时的提交操作")]),e._v(" "),_("p",[e._v("当 "),_("code",[e._v("_HEAD_")]),e._v(" 处于分离状态（不依附于任一分支）时，提交操作可以正常进行，但是不会更新任何已命名的分支。你可以认为这是在更新一个匿名分支。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/commit-detached.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("一旦此后你切换到别的分支，比如说 "),_("code",[e._v("_master_")]),e._v("，那么这个提交节点（可能）再也不会被引用到，然后就会被丢弃掉了。注意这个命令之后就不会有东西引用 "),_("code",[e._v("_2eecb_")]),e._v("。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/checkout-after-detached.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("但是，如果你想保存这个状态，可以用命令 "),_("code",[e._v("git checkout -b name")]),e._v(" 来创建一个新的分支。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/checkout-b-detached.svg",alt:"enter image description here"}})]),e._v(" "),_("h3",{attrs:{id:"reset"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reset","aria-hidden":"true"}},[e._v("#")]),e._v(" Reset")]),e._v(" "),_("p",[_("code",[e._v("git reset")]),e._v(" 命令把当前分支指向另一个位置，并且有选择的变动工作目录和索引。也用来在从历史commit历史中复制文件到索引，而不动工作目录。")]),e._v(" "),_("p",[e._v("如果不给选项，那么当前分支指向到那个提交。如果用 "),_("code",[e._v("--hard")]),e._v(" 选项，那么工作目录也更新，如果用 "),_("code",[e._v("--soft")]),e._v(" 选项，那么都不变。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/reset-commit.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("如果没有给出提交点的版本号，那么默认用 "),_("code",[e._v("_HEAD_")]),e._v("。这样，分支指向不变，但是索引会回滚到最后一次提交，如果用 "),_("code",[e._v("--hard")]),e._v(" 选项，工作目录也同样。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/reset.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("如果给了文件名(或者 "),_("code",[e._v("-p")]),e._v(" 选项), 那么工作效果和带文件名的"),_("a",{attrs:{href:"#checkout"}},[e._v("checkout")]),e._v("差不多，除了索引被更新。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/reset-files.svg",alt:"enter image description here"}})]),e._v(" "),_("h3",{attrs:{id:"merge"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#merge","aria-hidden":"true"}},[e._v("#")]),e._v(" Merge")]),e._v(" "),_("p",[_("code",[e._v("git merge")]),e._v(" 命令把不同分支合并起来。合并前，索引必须和当前提交相同。如果另一个分支是当前提交的祖父节点，那么合并命令将什么也不做。")]),e._v(" "),_("p",[e._v("另一种情况是如果当前提交是另一个分支的祖父节点，就导致 "),_("code",[e._v("_fast-forward_")]),e._v(" 合并。指向只是简单的移动，并生成一个新的提交。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/merge-ff.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("否则就是一次真正的合并。默认把当前提交（"),_("code",[e._v("_ed489_")]),e._v(" 如下所示）和另一个提交（"),_("code",[e._v("_33104_")]),e._v("）以及他们的共同祖父节点（"),_("code",[e._v("_b325c_")]),e._v("）进行一次"),_("a",{attrs:{href:"http://en.wikipedia.org/wiki/Three-way_merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("三方合并"),_("OutboundLink")],1),e._v("。结果是先保存当前目录和索引，然后和父节点 "),_("code",[e._v("_33104_")]),e._v(" 一起做一次新提交。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/merge.svg",alt:"enter image description here"}})]),e._v(" "),_("h3",{attrs:{id:"cherry-pick"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick","aria-hidden":"true"}},[e._v("#")]),e._v(" Cherry Pick")]),e._v(" "),_("p",[_("code",[e._v("git cherry-pick")]),e._v(" 命令「复制」一个提交节点并在当前分支做一次完全一样的新提交。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/cherry-pick.svg",alt:"enter image description here"}})]),e._v(" "),_("h3",{attrs:{id:"rebase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rebase","aria-hidden":"true"}},[e._v("#")]),e._v(" Rebase")]),e._v(" "),_("p",[_("code",[e._v("git rebase")]),e._v(" 是合并命令的另一种选择。合并把两个父分支合并进行一次提交，提交历史不是线性的。rebase 在当前分支上重演另一个分支的历史，提交历史是线性的。")]),e._v(" "),_("p",[e._v("本质上，这是线性化的自动的 "),_("a",{attrs:{href:"#cherry-pick"}},[e._v("cherry-pick")]),e._v("。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/rebase.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("上面的命令都在 "),_("code",[e._v("_topic_")]),e._v(" 分支中进行，而不是 "),_("code",[e._v("_master_")]),e._v(" 分支，在 "),_("code",[e._v("_master_")]),e._v(" 分支上重演，并且把分支指向新的节点。注意旧提交没有被引用，将被回收。")]),e._v(" "),_("p",[e._v("要限制回滚范围，使用 "),_("code",[e._v("--onto")]),e._v(" 选项。下面的命令在 "),_("code",[e._v("_master_")]),e._v(" 分支上重演当前分支从 "),_("code",[e._v("_169a6_")]),e._v(" 以来的最近几个提交，即 "),_("code",[e._v("_2c33a_")]),e._v("。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://marklodato.github.io/visual-git-guide/rebase-onto.svg",alt:"enter image description here"}})]),e._v(" "),_("p",[e._v("同样有 "),_("code",[e._v("git rebase --interactive")]),e._v(" 让你更方便的完成一些复杂操作，比如丢弃、重排、修改、合并提交。")]),e._v(" "),_("blockquote",[_("p",[e._v("这篇文章是"),_("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[_("strong",[e._v("「git-recipes」")]),_("OutboundLink")],1),e._v("的一部分，点击 "),_("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/wiki/",target:"_blank",rel:"noopener noreferrer"}},[_("strong",[e._v("目录")]),_("OutboundLink")],1),e._v(" 查看所有章节。")]),e._v(" "),_("p",[e._v("如果你觉得文章对你有帮助，欢迎点击右上角的 "),_("strong",[e._v("Star")]),e._v(" 🌟 或 "),_("strong",[e._v("Fork")]),e._v(" 🍴。")]),e._v(" "),_("p",[e._v("如果你发现了错误，或是想要加入协作，请参阅 "),_("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/issues/1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wiki 协作说明"),_("OutboundLink")],1),e._v("。")])])])},[],!1,null,null,null);t.default=i.exports}}]);