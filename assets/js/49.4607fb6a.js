(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{111:function(s,e,n){"use strict";n.r(e);var a=n(3),r=Object(a.a)({},function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#本文适用的读者"}},[s._v("本文适用的读者")])]),n("li",[n("a",{attrs:{href:"#promise标准解读"}},[s._v("Promise标准解读")])]),n("li",[n("a",{attrs:{href:"#一步一步实现一个promise"}},[s._v("一步一步实现一个Promise")]),n("ul",[n("li",[n("a",{attrs:{href:"#构造函数"}},[s._v("构造函数")])]),n("li",[n("a",{attrs:{href:"#then-方法"}},[s._v("then方法")])]),n("li",[n("a",{attrs:{href:"#下面我们首先处理简单的情况，值的穿透"}},[s._v("下面我们首先处理简单的情况，值的穿透")])])])]),n("li",[n("a",{attrs:{href:"#测试"}},[s._v("测试")])]),n("li",[n("a",{attrs:{href:"#关于promise的其它问题"}},[s._v("关于Promise的其它问题")]),n("ul",[n("li",[n("a",{attrs:{href:"#promise的性能问题"}},[s._v("Promise的性能问题")])]),n("li",[n("a",{attrs:{href:"#如何停止一个promise链？"}},[s._v("如何停止一个Promise链？")])]),n("li",[n("a",{attrs:{href:"#promise链上返回的最后一个promise出错了怎么办？"}},[s._v("Promise链上返回的最后一个Promise出错了怎么办？")])]),n("li",[n("a",{attrs:{href:"#angular里的-q跟其它promise的交互"}},[s._v("Angular里的$q跟其它Promise的交互")])]),n("li",[n("a",{attrs:{href:"#出错时，是用throw-new-error-还是用return-promise-reject-new-error-呢？"}},[s._v("出错时，是用throw new Error()还是用return Promise.reject(new Error())呢？")])]),n("li",[n("a",{attrs:{href:"#最佳实践"}},[s._v("最佳实践")])]),n("li",[n("a",{attrs:{href:"#promise相关的convenience-method的实现"}},[s._v("Promise相关的convenience method的实现")])])])])])]),n("p"),s._v(" "),n("p",[s._v("本文转自"),n("a",{attrs:{href:"https://github.com/xieranmaya/blog/issues/3",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/xieranmaya/blog/issues/3"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"本文适用的读者"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本文适用的读者","aria-hidden":"true"}},[s._v("#")]),s._v(" 本文适用的读者")]),s._v(" "),n("p",[s._v("本文写给有一定Promise使用经验的人，如果你还没有使用过Promise，这篇文章可能不适合你，建议先"),n("a",{attrs:{href:"http://www.html5rocks.com/zh/tutorials/es6/promises/",target:"_blank",rel:"noopener noreferrer"}},[s._v("了解Promise的使用"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"promise标准解读"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise标准解读","aria-hidden":"true"}},[s._v("#")]),s._v(" Promise标准解读")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("只有一个"),n("code",[s._v("then")]),s._v("方法，没有"),n("code",[s._v("catch")]),s._v("，"),n("code",[s._v("race")]),s._v("，"),n("code",[s._v("all")]),s._v("等方法，甚至没有构造函数")]),s._v(" "),n("p",[s._v("Promise标准中仅指定了Promise对象的"),n("code",[s._v("then")]),s._v("方法的行为，其它一切我们常见的方法/函数都并没有指定，包括"),n("code",[s._v("catch")]),s._v("，"),n("code",[s._v("race")]),s._v("，"),n("code",[s._v("all")]),s._v("等常用方法，甚至也没有指定该如何构造出一个Promise对象，另外then也没有一般实现中（Q, $q等）所支持的第三个参数，一般称onProgress")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("then")]),s._v("方法返回一个新的Promise")]),s._v(" "),n("p",[s._v("Promise的"),n("code",[s._v("then")]),s._v("方法返回一个新的Promise，而不是返回this，此处在下文会有更多解释")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("promise2 = promise1.then(alert)\npromise2 != promise1 // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("不同Promise的实现需要可以相互调用(interoperable)")])]),s._v(" "),n("li",[n("p",[s._v("Promise的初始状态为pending，它可以由此状态转换为fulfilled（本文为了一致把此状态叫做resolved）或者rejected，一旦状态确定，就不可以再次转换为其它状态，状态确定的过程称为settle")])]),s._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://promisesaplus.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("更具体的标准见这里"),n("OutboundLink")],1)])])]),s._v(" "),n("h2",{attrs:{id:"一步一步实现一个promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一步一步实现一个promise","aria-hidden":"true"}},[s._v("#")]),s._v(" 一步一步实现一个Promise")]),s._v(" "),n("p",[s._v("下面我们就来一步一步实现一个Promise")]),s._v(" "),n("h3",{attrs:{id:"构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 构造函数")]),s._v(" "),n("p",[s._v("因为标准并没有指定如何构造一个Promise对象，所以我们同样以目前一般Promise实现中通用的方法来构造一个Promise对象，也是ES6原生Promise里所使用的方式，即：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// Promise构造函数接收一个executor函数，executor函数执行完同步或异步操作后，调用它的两个参数resolve和reject\nvar promise = new Promise(function(resolve, reject) {\n  /*\n    如果操作成功，调用resolve并传入value\n    如果操作失败，调用reject并传入reason\n  */\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("我们先实现构造函数的框架如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Promise(executor) {\n  var self = this\n  self.status = 'pending' // Promise当前的状态\n  self.data = undefined  // Promise的值\n  self.onResolvedCallback = [] // Promise resolve时的回调函数集，因为在Promise结束之前有可能有多个回调添加到它上面\n  self.onRejectedCallback = [] // Promise reject时的回调函数集，因为在Promise结束之前有可能有多个回调添加到它上面\n\n  executor(resolve, reject) // 执行executor并传入相应的参数\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面的代码基本实现了Promise构造函数的主体，但目前还有两个问题：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("我们给executor函数传了两个参数：resolve和reject，这两个参数目前还没有定义")])]),s._v(" "),n("li",[n("p",[s._v("executor有可能会出错（throw），类似下面这样，而如果executor出错，Promise应该被其throw出的值reject：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Promise(function(resolve, reject) {\n  throw 2\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])])]),s._v(" "),n("p",[s._v("所以我们需要在构造函数里定义resolve和reject这两个函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Promise(executor) {\n  var self = this\n  self.status = 'pending' // Promise当前的状态\n  self.data = undefined  // Promise的值\n  self.onResolvedCallback = [] // Promise resolve时的回调函数集，因为在Promise结束之前有可能有多个回调添加到它上面\n  self.onRejectedCallback = [] // Promise reject时的回调函数集，因为在Promise结束之前有可能有多个回调添加到它上面\n\n  function resolve(value) {\n    // TODO\n  }\n\n  function reject(reason) {\n    // TODO\n  }\n\n  try { // 考虑到执行executor的过程中有可能出错，所以我们用try/catch块给包起来，并且在出错后以catch到的值reject掉这个Promise\n    executor(resolve, reject) // 执行executor\n  } catch(e) {\n    reject(e)\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("有人可能会问，resolve和reject这两个函数能不能"),n("strong",[s._v("不定义在构造函数里")]),s._v("呢？考虑到我们在executor函数里是以"),n("code",[s._v("resolve(value)")]),s._v("，"),n("code",[s._v("reject(reason)")]),s._v("的形式调用的这两个函数，而不是以"),n("code",[s._v("resolve.call(promise, value)")]),s._v("，"),n("code",[s._v("reject.call(promise, reason)")]),s._v("这种形式调用的，所以这两个函数在调用时的内部也必然有一个隐含的this，也就是说，要么这两个函数是经过bind后传给了executor，要么它们定义在构造函数的内部，使用self来访问所属的Promise对象。所以如果我们想把这两个函数定义在构造函数的外部，确实是可以这么写的：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("reject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("executor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("executor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    reject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("但是众所周知，bind也会返回一个新的函数，这么一来还是相当于每个Promise对象都有一对属于自己的"),n("code",[s._v("resolve")]),s._v("和"),n("code",[s._v("reject")]),s._v("函数，就跟写在构造函数内部没什么区别了，所以我们就直接把这两个函数定义在构造函数里面了。不过话说回来，如果浏览器对bind的所优化，使用后一种形式应该可以提升一下内存使用效率。")]),s._v(" "),n("p",[n("strong",[s._v("另外我们这里的实现并没有考虑隐藏this上的变量，这使得这个Promise的状态可以在executor函数外部被改变，在一个靠谱的实现里，构造出的Promise对象的状态和最终结果应当是无法从外部更改的。")])]),s._v(" "),n("p",[s._v("接下来，我们实现"),n("code",[s._v("resolve")]),s._v("和"),n("code",[s._v("reject")]),s._v("这两个函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Promise(executor) {\n  // ...\n\n  function resolve(value) {\n    if (self.status === 'pending') {\n      self.status = 'resolved'\n      self.data = value\n      for(var i = 0; i < self.onResolvedCallback.length; i++) {\n        self.onResolvedCallback[i](value)\n      }\n    }\n  }\n\n  function reject(reason) {\n    if (self.status === 'pending') {\n      self.status = 'rejected'\n      self.data = reason\n      for(var i = 0; i < self.onRejectedCallback.length; i++) {\n        self.onRejectedCallback[i](reason)\n      }\n    }\n  }\n\n  // ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[s._v("基本上就是在判断状态为pending之后把状态改为相应的值，并把对应的value和reason存在self的data属性上面，之后执行相应的回调函数，逻辑很简单，这里就不多解释了。")]),s._v(" "),n("h3",{attrs:{id:"then方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#then方法","aria-hidden":"true"}},[s._v("#")]),s._v(" "),n("code",[s._v("then")]),s._v("方法")]),s._v(" "),n("p",[s._v("Promise对象有一个then方法，用来注册在这个Promise状态确定后的回调，很明显，then方法需要写在原型链上。then方法会返回一个Promise，关于这一点，Promise/A+标准并没有要求返回的这个Promise是一个新的对象，但在Promise/A标准中，明确规定了then要返回一个新的对象，目前的Promise实现中then几乎都是返回一个新的Promise("),n("a",{attrs:{href:"https://promisesaplus.com/differences-from-promises-a#point-5",target:"_blank",rel:"noopener noreferrer"}},[s._v("详情"),n("OutboundLink")],1),s._v(")对象，所以在我们的实现中，也让then返回一个新的Promise对象。")]),s._v(" "),n("p",[s._v("关于这一点，我认为标准中是有一点矛盾的：")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://promisesaplus.com/#point-49",target:"_blank",rel:"noopener noreferrer"}},[s._v("标准中说"),n("OutboundLink")],1),s._v("，如果"),n("code",[s._v("promise2 = promise1.then(onResolved, onRejected)")]),s._v("里的onResolved/onRejected返回一个Promise，则promise2直接取这个Promise的状态和值为己用，但考虑如下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("promise2 = promise1.then(function foo(value) {\n  return Promise.reject(3)\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("此处如果"),n("code",[s._v("foo")]),s._v("运行了，则promise1的状态必然已经确定且为"),n("code",[s._v("resolved")]),s._v("，如果then返回了this（即"),n("code",[s._v("promise2 === promise1")]),s._v("），说明promise2和promise1是同一个对象，而此时promise1/2的状态已经确定，没有办法再取"),n("code",[s._v("Promise.reject(3)")]),s._v("的状态和结果为己用，因为Promise的状态确定后就不可再转换为其它状态。")]),s._v(" "),n("p",[s._v("另外每个Promise对象都可以在其上多次调用then方法，而每次调用then返回的Promise的状态取决于那一次调用then时传入参数的返回值，所以then不能返回this，因为then每次返回的Promise的结果都有可能不同。")]),s._v(" "),n("p",[s._v("下面我们来实现then方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// then方法接收两个参数，onResolved，onRejected，分别为Promise成功或失败后的回调\nPromise.prototype.then = function(onResolved, onRejected) {\n  var self = this\n  var promise2\n\n  // 根据标准，如果then的参数不是function，则我们需要忽略它，此处以如下方式处理\n  onResolved = typeof onResolved === 'function' ? onResolved : function(v) {}\n  onRejected = typeof onRejected === 'function' ? onRejected : function(r) {}\n\n  if (self.status === 'resolved') {\n    return promise2 = new Promise(function(resolve, reject) {\n\n    })\n  }\n\n  if (self.status === 'rejected') {\n    return promise2 = new Promise(function(resolve, reject) {\n\n    })\n  }\n\n  if (self.status === 'pending') {\n    return promise2 = new Promise(function(resolve, reject) {\n\n    })\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("p",[s._v("Promise总共有三种可能的状态，我们分三个if块来处理，在里面分别都返回一个new Promise。")]),s._v(" "),n("p",[s._v("根据标准，我们知道，对于如下代码，promise2的值取决于then里面函数的返回值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("promise2 = promise1.then(function(value) {\n  return 4\n}, function(reason) {\n  throw new Error('sth went wrong')\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("如果promise1被resolve了，promise2的将被"),n("code",[s._v("4")]),s._v(" resolve，如果promise1被reject了，promise2将被"),n("code",[s._v("new Error('sth went wrong')")]),s._v(" reject，更多复杂的情况不再详述。")]),s._v(" "),n("p",[s._v("所以，我们需要在then里面执行onResolved或者onRejected，并根据返回值(标准中记为x)来确定promise2的结果，并且，如果onResolved/onRejected返回的是一个Promise，promise2将直接取这个Promise的结果：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Promise.prototype.then = function(onResolved, onRejected) {\n  var self = this\n  var promise2\n\n  // 根据标准，如果then的参数不是function，则我们需要忽略它，此处以如下方式处理\n  onResolved = typeof onResolved === 'function' ? onResolved : function(value) {}\n  onRejected = typeof onRejected === 'function' ? onRejected : function(reason) {}\n\n  if (self.status === 'resolved') {\n    // 如果promise1(此处即为this/self)的状态已经确定并且是resolved，我们调用onResolved\n    // 因为考虑到有可能throw，所以我们将其包在try/catch块里\n    return promise2 = new Promise(function(resolve, reject) {\n      try {\n        var x = onResolved(self.data)\n        if (x instanceof Promise) { // 如果onResolved的返回值是一个Promise对象，直接取它的结果做为promise2的结果\n          x.then(resolve, reject)\n        }\n        resolve(x) // 否则，以它的返回值做为promise2的结果\n      } catch (e) {\n        reject(e) // 如果出错，以捕获到的错误做为promise2的结果\n      }\n    })\n  }\n\n  // 此处与前一个if块的逻辑几乎相同，区别在于所调用的是onRejected函数，就不再做过多解释\n  if (self.status === 'rejected') {\n    return promise2 = new Promise(function(resolve, reject) {\n      try {\n        var x = onRejected(self.data)\n        if (x instanceof Promise) {\n          x.then(resolve, reject)\n        }\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  if (self.status === 'pending') {\n  // 如果当前的Promise还处于pending状态，我们并不能确定调用onResolved还是onRejected，\n  // 只能等到Promise的状态确定后，才能确实如何处理。\n  // 所以我们需要把我们的**两种情况**的处理逻辑做为callback放入promise1(此处即this/self)的回调数组里\n  // 逻辑本身跟第一个if块内的几乎一致，此处不做过多解释\n    return promise2 = new Promise(function(resolve, reject) {\n      self.onResolvedCallback.push(function(value) {\n        try {\n          var x = onResolved(self.data)\n          if (x instanceof Promise) {\n            x.then(resolve, reject)\n          }\n        } catch (e) {\n          reject(e)\n        }\n      })\n\n      self.onRejectedCallback.push(function(reason) {\n        try {\n          var x = onRejected(self.data)\n          if (x instanceof Promise) {\n            x.then(resolve, reject)\n          }\n        } catch (e) {\n          reject(e)\n        }\n      })\n    })\n  }\n}\n\n// 为了下文方便，我们顺便实现一个catch方法\nPromise.prototype.catch = function(onRejected) {\n  return this.then(null, onRejected)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br")])]),n("p",[s._v("至此，我们基本实现了Promise标准中所涉及到的内容，但还有几个问题：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("不同的Promise实现之间需要无缝的可交互，即Q的Promise，ES6的Promise，和我们实现的Promise之间以及其它的Promise实现，应该并且是有必要无缝相互调用的，比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 此处用MyPromise来代表我们实现的Promise\nnew MyPromise(function(resolve, reject) { // 我们实现的Promise\n  setTimeout(function() {\n    resolve(42)\n  }, 2000)\n}).then(function() {\n  return new Promise.reject(2) // ES6的Promise\n}).then(function() {\n  return Q.all([ // Q的Promise\n    new MyPromise(resolve=>resolve(8)), // 我们实现的Promise\n    new Promise.resolve(9), // ES6的Promise\n    Q.resolve(9) // Q的Promise\n  ])\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("我们前面实现的代码并没有处理这样的逻辑，我们只判断了onResolved/onRejected的返回值是否为我们实现的Promise的实例，并没有做任何其它的判断，所以上面这样的代码目前是没有办法在我们的Promise里正确运行的。")])]),s._v(" "),n("li",[n("p",[s._v("下面这样的代码目前也是没办法处理的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Promise(resolve=>resolve(8))\n  .then()\n  .then()\n  .then(function foo(value) {\n    alert(value)\n  })\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("正确的行为应该是alert出8，而如果拿我们的Promise，运行上述代码，将会alert出undefined。这种行为称为穿透，即8这个值会穿透两个then(说Promise更为准确)到达最后一个then里的foo函数里，成为它的实参，最终将会alert出8。")])])]),s._v(" "),n("h3",{attrs:{id:"下面我们首先处理简单的情况，值的穿透"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#下面我们首先处理简单的情况，值的穿透","aria-hidden":"true"}},[s._v("#")]),s._v(" 下面我们首先处理简单的情况，值的穿透")]),s._v(" "),n("h4",{attrs:{id:"promise值的穿透"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise值的穿透","aria-hidden":"true"}},[s._v("#")]),s._v(" Promise值的穿透")]),s._v(" "),n("p",[s._v("通过观察，会发现我们希望下面这段代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Promise(resolve=>resolve(8))\n  .then()\n  .catch()\n  .then(function(value) {\n    alert(value)\n  })\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("跟下面这段代码的行为是一样的")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Promise(resolve=>resolve(8))\n  .then(function(value){\n    return value\n  })\n  .catch(function(reason){\n    throw reason\n  })\n  .then(function(value) {\n    alert(value)\n  })\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("所以如果想要把then的实参留空且让值可以穿透到后面，意味着then的两个参数的默认值分别为"),n("code",[s._v("function(value) {return value}")]),s._v("，"),n("code",[s._v("function(reason) {throw reason}")]),s._v("。\n所以我们只需要把then里判断"),n("code",[s._v("onResolved")]),s._v("和"),n("code",[s._v("onRejected")]),s._v("的部分改成如下即可：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("onResolved = typeof onResolved === 'function' ? onResolved : function(value) {return value}\nonRejected = typeof onRejected === 'function' ? onRejected : function(reason) {throw reason}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("于是Promise神奇的值的穿透也没有那么黑魔法，只不过是then默认参数就是把值往后传或者抛")])]),s._v(" "),n("h4",{attrs:{id:"不同promise的交互"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不同promise的交互","aria-hidden":"true"}},[s._v("#")]),s._v(" 不同Promise的交互")]),s._v(" "),n("p",[s._v("关于不同Promise间的交互，其实标准里是有"),n("a",{attrs:{href:"https://promisesaplus.com/#point-46",target:"_blank",rel:"noopener noreferrer"}},[s._v("说明"),n("OutboundLink")],1),s._v("的，其中详细指定了如何通过then的实参返回的值来决定promise2的状态，我们只需要按照标准把标准的内容转成代码即可。")]),s._v(" "),n("p",[s._v("这里简单解释一下标准：")]),s._v(" "),n("p",[s._v("即我们要把onResolved/onRejected的返回值，x，当成一个可能是Promise的对象，也即标准里所说的thenable，并以最保险的方式调用x上的then方法，如果大家都按照标准实现，那么不同的Promise之间就可以交互了。而标准为了保险起见，即使x返回了一个带有then属性但并不遵循Promise标准的对象（比如说这个x把它then里的两个参数都调用了，同步或者异步调用（PS，原则上then的两个参数需要异步调用，下文会讲到），或者是出错后又调用了它们，或者then根本不是一个函数），也能尽可能正确处理。")]),s._v(" "),n("p",[s._v("关于为何需要不同的Promise实现能够相互交互，我想原因应该是显然的，Promise并不是JS一早就有的标准，不同第三方的实现之间是并不相互知晓的，如果你使用的某一个库中封装了一个Promise实现，想象一下如果它不能跟你自己使用的Promise实现交互的场景。。。")]),s._v(" "),n("p",[s._v("建议各位对照着标准阅读以下代码，因为标准对此说明的非常详细，所以你应该能够在任意一个Promise实现中找到类似的代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/*\nresolvePromise函数即为根据x的值来决定promise2的状态的函数\n也即标准中的[Promise Resolution Procedure](https://promisesaplus.com/#point-47)\nx为`promise2 = promise1.then(onResolved, onRejected)`里`onResolved/onRejected`的返回值\n`resolve`和`reject`实际上是`promise2`的`executor`的两个实参，因为很难挂在其它的地方，所以一并传进来。\n相信各位一定可以对照标准把标准转换成代码，这里就只标出代码在标准中对应的位置，只在必要的地方做一些解释\n*/\nfunction resolvePromise(promise2, x, resolve, reject) {\n  var then\n  var thenCalledOrThrow = false\n\n  if (promise2 === x) { // 对应标准2.3.1节\n    return reject(new TypeError('Chaining cycle detected for promise!'))\n  }\n\n  if (x instanceof Promise) { // 对应标准2.3.2节\n    // 如果x的状态还没有确定，那么它是有可能被一个thenable决定最终状态和值的\n    // 所以这里需要做一下处理，而不能一概的以为它会被一个“正常”的值resolve\n    if (x.status === 'pending') {\n      x.then(function(value) {\n        resolvePromise(promise2, value, resolve, reject)\n      }, reject)\n    } else { // 但如果这个Promise的状态已经确定了，那么它肯定有一个“正常”的值，而不是一个thenable，所以这里直接取它的状态\n      x.then(resolve, reject)\n    }\n    return\n  }\n\n  if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) { // 2.3.3\n    try {\n\n      // 2.3.3.1 因为x.then有可能是一个getter，这种情况下多次读取就有可能产生副作用\n      // 即要判断它的类型，又要调用它，这就是两次读取\n      then = x.then \n      if (typeof then === 'function') { // 2.3.3.3\n        then.call(x, function rs(y) { // 2.3.3.3.1\n          if (thenCalledOrThrow) return // 2.3.3.3.3 即这三处谁选执行就以谁的结果为准\n          thenCalledOrThrow = true\n          return resolvePromise(promise2, y, resolve, reject) // 2.3.3.3.1\n        }, function rj(r) { // 2.3.3.3.2\n          if (thenCalledOrThrow) return // 2.3.3.3.3 即这三处谁选执行就以谁的结果为准\n          thenCalledOrThrow = true\n          return reject(r)\n        })\n      } else { // 2.3.3.4\n        resolve(x)\n      }\n    } catch (e) { // 2.3.3.2\n      if (thenCalledOrThrow) return // 2.3.3.3.3 即这三处谁选执行就以谁的结果为准\n      thenCalledOrThrow = true\n      return reject(e)\n    }\n  } else { // 2.3.4\n    resolve(x)\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br")])]),n("p",[s._v("然后我们使用这个函数的调用替换then里几处判断x是否为Promise对象的位置即可，见下方完整代码。")]),s._v(" "),n("p",[s._v("最后，我们刚刚说到，原则上，"),n("code",[s._v("promise.then(onResolved, onRejected)")]),s._v("里的这两相函数需要异步调用，关于这一点，标准里也有"),n("a",{attrs:{href:"https://promisesaplus.com/#point-67",target:"_blank",rel:"noopener noreferrer"}},[s._v("说明"),n("OutboundLink")],1),s._v("：")]),s._v(" "),n("blockquote",[n("p",[s._v("In practice, this requirement ensures that onFulfilled and onRejected execute asynchronously, after the event loop turn in which then is called, and with a fresh stack.")])]),s._v(" "),n("p",[s._v("所以我们需要对我们的代码做一点变动，即在四个地方加上setTimeout(fn, 0)，这点会在完整的代码中注释，请各位自行发现。")]),s._v(" "),n("p",[s._v("事实上，即使你不参照标准，最终你在自测试时也会发现如果then的参数不以异步的方式调用，有些情况下Promise会不按预期的方式行为，通过不断的自测，最终你必然会让then的参数异步执行，让executor函数立即执行。本人在一开始实现Promise时就没有参照标准，而是自己凭经验测试，最终发现的这个问题。")]),s._v(" "),n("p",[s._v("至此，我们就实现了一个的Promise，完整代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("try {\n  module.exports = Promise\n} catch (e) {}\n\nfunction Promise(executor) {\n  var self = this\n\n  self.status = 'pending'\n  self.onResolvedCallback = []\n  self.onRejectedCallback = []\n\n  function resolve(value) {\n    if (value instanceof Promise) {\n      return value.then(resolve, reject)\n    }\n    setTimeout(function() { // 异步执行所有的回调函数\n      if (self.status === 'pending') {\n        self.status = 'resolved'\n        self.data = value\n        for (var i = 0; i < self.onResolvedCallback.length; i++) {\n          self.onResolvedCallback[i](value)\n        }\n      }\n    })\n  }\n\n  function reject(reason) {\n    setTimeout(function() { // 异步执行所有的回调函数\n      if (self.status === 'pending') {\n        self.status = 'rejected'\n        self.data = reason\n        for (var i = 0; i < self.onRejectedCallback.length; i++) {\n          self.onRejectedCallback[i](reason)\n        }\n      }\n    })\n  }\n\n  try {\n    executor(resolve, reject)\n  } catch (reason) {\n    reject(reason)\n  }\n}\n\nfunction resolvePromise(promise2, x, resolve, reject) {\n  var then\n  var thenCalledOrThrow = false\n\n  if (promise2 === x) {\n    return reject(new TypeError('Chaining cycle detected for promise!'))\n  }\n\n  if (x instanceof Promise) {\n    if (x.status === 'pending') { //because x could resolved by a Promise Object\n      x.then(function(v) {\n        resolvePromise(promise2, v, resolve, reject)\n      }, reject)\n    } else { //but if it is resolved, it will never resolved by a Promise Object but a static value;\n      x.then(resolve, reject)\n    }\n    return\n  }\n\n  if ((x !== null) && ((typeof x === 'object') || (typeof x === 'function'))) {\n    try {\n      then = x.then //because x.then could be a getter\n      if (typeof then === 'function') {\n        then.call(x, function rs(y) {\n          if (thenCalledOrThrow) return\n          thenCalledOrThrow = true\n          return resolvePromise(promise2, y, resolve, reject)\n        }, function rj(r) {\n          if (thenCalledOrThrow) return\n          thenCalledOrThrow = true\n          return reject(r)\n        })\n      } else {\n        resolve(x)\n      }\n    } catch (e) {\n      if (thenCalledOrThrow) return\n      thenCalledOrThrow = true\n      return reject(e)\n    }\n  } else {\n    resolve(x)\n  }\n}\n\nPromise.prototype.then = function(onResolved, onRejected) {\n  var self = this\n  var promise2\n  onResolved = typeof onResolved === 'function' ? onResolved : function(v) {\n    return v\n  }\n  onRejected = typeof onRejected === 'function' ? onRejected : function(r) {\n    throw r\n  }\n\n  if (self.status === 'resolved') {\n    return promise2 = new Promise(function(resolve, reject) {\n      setTimeout(function() { // 异步执行onResolved\n        try {\n          var x = onResolved(self.data)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (reason) {\n          reject(reason)\n        }\n      })\n    })\n  }\n\n  if (self.status === 'rejected') {\n    return promise2 = new Promise(function(resolve, reject) {\n      setTimeout(function() { // 异步执行onRejected\n        try {\n          var x = onRejected(self.data)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (reason) {\n          reject(reason)\n        }\n      })\n    })\n  }\n\n  if (self.status === 'pending') {\n    // 这里之所以没有异步执行，是因为这些函数必然会被resolve或reject调用，而resolve或reject函数里的内容已是异步执行，构造函数里的定义\n    return promise2 = new Promise(function(resolve, reject) {\n      self.onResolvedCallback.push(function(value) {\n        try {\n          var x = onResolved(value)\n          resolvePromise(promise2, x, resolve, reject)\n        } catch (r) {\n          reject(r)\n        }\n      })\n\n      self.onRejectedCallback.push(function(reason) {\n          try {\n            var x = onRejected(reason)\n            resolvePromise(promise2, x, resolve, reject)\n          } catch (r) {\n            reject(r)\n          }\n        })\n    })\n  }\n}\n\nPromise.prototype.catch = function(onRejected) {\n  return this.then(null, onRejected)\n}\n\nPromise.deferred = Promise.defer = function() {\n  var dfd = {}\n  dfd.promise = new Promise(function(resolve, reject) {\n    dfd.resolve = resolve\n    dfd.reject = reject\n  })\n  return dfd\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br"),n("span",{staticClass:"line-number"},[s._v("119")]),n("br"),n("span",{staticClass:"line-number"},[s._v("120")]),n("br"),n("span",{staticClass:"line-number"},[s._v("121")]),n("br"),n("span",{staticClass:"line-number"},[s._v("122")]),n("br"),n("span",{staticClass:"line-number"},[s._v("123")]),n("br"),n("span",{staticClass:"line-number"},[s._v("124")]),n("br"),n("span",{staticClass:"line-number"},[s._v("125")]),n("br"),n("span",{staticClass:"line-number"},[s._v("126")]),n("br"),n("span",{staticClass:"line-number"},[s._v("127")]),n("br"),n("span",{staticClass:"line-number"},[s._v("128")]),n("br"),n("span",{staticClass:"line-number"},[s._v("129")]),n("br"),n("span",{staticClass:"line-number"},[s._v("130")]),n("br"),n("span",{staticClass:"line-number"},[s._v("131")]),n("br"),n("span",{staticClass:"line-number"},[s._v("132")]),n("br"),n("span",{staticClass:"line-number"},[s._v("133")]),n("br"),n("span",{staticClass:"line-number"},[s._v("134")]),n("br"),n("span",{staticClass:"line-number"},[s._v("135")]),n("br"),n("span",{staticClass:"line-number"},[s._v("136")]),n("br"),n("span",{staticClass:"line-number"},[s._v("137")]),n("br"),n("span",{staticClass:"line-number"},[s._v("138")]),n("br"),n("span",{staticClass:"line-number"},[s._v("139")]),n("br"),n("span",{staticClass:"line-number"},[s._v("140")]),n("br"),n("span",{staticClass:"line-number"},[s._v("141")]),n("br"),n("span",{staticClass:"line-number"},[s._v("142")]),n("br"),n("span",{staticClass:"line-number"},[s._v("143")]),n("br"),n("span",{staticClass:"line-number"},[s._v("144")]),n("br"),n("span",{staticClass:"line-number"},[s._v("145")]),n("br"),n("span",{staticClass:"line-number"},[s._v("146")]),n("br"),n("span",{staticClass:"line-number"},[s._v("147")]),n("br"),n("span",{staticClass:"line-number"},[s._v("148")]),n("br"),n("span",{staticClass:"line-number"},[s._v("149")]),n("br"),n("span",{staticClass:"line-number"},[s._v("150")]),n("br"),n("span",{staticClass:"line-number"},[s._v("151")]),n("br"),n("span",{staticClass:"line-number"},[s._v("152")]),n("br"),n("span",{staticClass:"line-number"},[s._v("153")]),n("br"),n("span",{staticClass:"line-number"},[s._v("154")]),n("br"),n("span",{staticClass:"line-number"},[s._v("155")]),n("br"),n("span",{staticClass:"line-number"},[s._v("156")]),n("br"),n("span",{staticClass:"line-number"},[s._v("157")]),n("br"),n("span",{staticClass:"line-number"},[s._v("158")]),n("br"),n("span",{staticClass:"line-number"},[s._v("159")]),n("br"),n("span",{staticClass:"line-number"},[s._v("160")]),n("br"),n("span",{staticClass:"line-number"},[s._v("161")]),n("br"),n("span",{staticClass:"line-number"},[s._v("162")]),n("br")])]),n("h2",{attrs:{id:"测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试","aria-hidden":"true"}},[s._v("#")]),s._v(" 测试")]),s._v(" "),n("p",[s._v("如何确定我们实现的Promise符合标准呢？Promise有一个配套的"),n("a",{attrs:{href:"https://github.com/promises-aplus/promises-tests",target:"_blank",rel:"noopener noreferrer"}},[s._v("测试脚本"),n("OutboundLink")],1),s._v("，只需要我们在一个CommonJS的模块中暴露一个deferred方法（即exports.deferred方法），就可以了，代码见上述代码的最后。然后执行如下代码即可执行测试：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("npm i -g promises-aplus-tests\npromises-aplus-tests Promise.js\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"关于promise的其它问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于promise的其它问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 关于Promise的其它问题")]),s._v(" "),n("h3",{attrs:{id:"promise的性能问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise的性能问题","aria-hidden":"true"}},[s._v("#")]),s._v(" Promise的性能问题")]),s._v(" "),n("p",[s._v("可能各位看官会觉得奇怪，Promise能有什么性能问题呢？并没有大量的计算啊，几乎都是处理逻辑的代码。")]),s._v(" "),n("p",[s._v("理论上说，不能叫做“性能问题”，而只是有可能出现的延迟问题。什么意思呢，记得刚刚我们说需要把4块代码包在setTimeout里吧，先考虑如下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var start = +new Date()\nfunction foo() {\n  setTimeout(function() {\n    console.log('setTimeout')\n    if((+new Date) - start < 1000) {\n      foo()\n    }\n  })\n}\nfoo()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("运行上面的代码，会打印出多少次'setTimeout'呢，各位可以自己试一下，不出意外的话，应该是250次左右，我刚刚运行了一次，是241次。这说明，上述代码中两次setTimeout运行的时间间隔约是4ms（另外，setInterval也是一样的），实事上，这正是浏览器两次Event Loop之间的时间间隔，相关标准各位可以自行查阅。另外，在Node中，这个时间间隔跟浏览器不一样，经过我的测试，是1ms。")]),s._v(" "),n("p",[s._v("单单一个4ms的延迟可能在一般的web应用中并不会有什么问题，但是考虑极端情况，我们有20个Promise链式调用，加上代码运行的时间，那么这个链式调用的第一行代码跟最后一行代码的运行很可能会超过100ms，如果这之间没有对UI有任何更新的话，虽然本质上没有什么性能问题，但可能会造成一定的卡顿或者闪烁，虽然在web应用中这种情形并不常见，但是在Node应用中，确实是有可能出现这样的case的，所以一个能够应用于生产环境的实现有必要把这个延迟消除掉。在Node中，我们可以调用process.nextTick或者setImmediate（"),n("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/kriskowal/q/blob/v1/q.js%23L101",target:"_blank",rel:"noopener noreferrer"}},[s._v("Q就是这么做的"),n("OutboundLink")],1),s._v("），在浏览器中具体如何做，已经超出了本文的讨论范围，总的来说，就是我们需要实现一个函数，行为跟setTimeout一样，但它需要异步且尽早的调用所有已经加入队列的函数，"),n("a",{attrs:{href:"http://www.bluejava.com/4NS/Speed-up-your-Websites-with-a-Faster-setTimeout-using-soon",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),n("OutboundLink")],1),s._v("有一个实现。")]),s._v(" "),n("h3",{attrs:{id:"如何停止一个promise链？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何停止一个promise链？","aria-hidden":"true"}},[s._v("#")]),s._v(" 如何停止一个Promise链？")]),s._v(" "),n("p",[s._v("在一些场景下，我们可能会遇到一个较长的Promise链式调用，在某一步中出现的错误让我们完全没有必要去运行链式调用后面所有的代码，类似下面这样（此处略去了then/catch里的函数）：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('new Promise(function(resolve, reject) {\n  resolve(42)\n})\n  .then(function(value) {\n    // "Big ERROR!!!"\n  })\n  .catch()\n  .then()\n  .then()\n  .catch()\n  .then()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("假设这个"),n("code",[s._v("Big ERROR!!!")]),s._v("的出现让我们完全没有必要运行后面所有的代码了，但链式调用的后面即有catch，也有then，无论我们是"),n("code",[s._v("return")]),s._v("还是"),n("code",[s._v("throw")]),s._v("，都不可避免的会进入某一个"),n("code",[s._v("catch")]),s._v("或"),n("code",[s._v("then")]),s._v("里面，那有没有办法让这个链式调用在"),n("code",[s._v("Big ERROR!!!")]),s._v("的后面就停掉，完全不去执行链式调用后面所有回调函数呢？")]),s._v(" "),n("p",[s._v("一开始遇到这个问题的时候我也百思不得其解，在网上搜遍了也没有结果，有人说可以在每个catch里面判断Error的类型，如果自己处理不了就接着throw，也有些其它办法，但总是要对现有代码进行一些改动并且所有的地方都要遵循这些约定，甚是麻烦。")]),s._v(" "),n("p",[s._v("然而当我从一个实现者的角度看问题时，确实找到了答案，就是在发生"),n("code",[s._v("Big ERROR")]),s._v("后return一个Promise，但这个Promise的executor函数什么也不做，这就意味着这个Promise将永远处于"),n("code",[s._v("pending")]),s._v("状态，由于then返回的Promise会直接取这个永远处于"),n("code",[s._v("pending")]),s._v("状态的Promise的状态，于是返回的这个Promise也将一直处于"),n("code",[s._v("pending")]),s._v("状态，后面的代码也就一直不会执行了，具体代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('new Promise(function(resolve, reject) {\n  resolve(42)\n})\n  .then(function(value) {\n    // "Big ERROR!!!"\n    return new Promise(function(){})\n  })\n  .catch()\n  .then()\n  .then()\n  .catch()\n  .then()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("这种方式看起来有些山寨，它也确实解决了问题。但它引入的一个新问题就是链式调用后面的所有回调函数都无法被垃圾回收器回收（在一个靠谱的实现里，Promise应该在执行完所有回调后删除对所有回调函数的引用以让它们能被回收，在前文的实现里，为了减少复杂度，并没有做这种处理），但如果我们不使用匿名函数，而是使用函数定义或者函数变量的话，在需要多次执行的Promise链中，这些函数也都只有一份在内存中，不被回收也是可以接受的。")]),s._v(" "),n("p",[s._v("我们可以将返回一个什么也不做的Promise封装成一个有语义的函数，以增加代码的可读性：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Promise.cancel = Promise.stop = function() {\n  return new Promise(function(){})\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("然后我们就可以这么使用了：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('new Promise(function(resolve, reject) {\n  resolve(42)\n})\n  .then(function(value) {\n    // "Big ERROR!!!"\n    return Promise.stop()\n  })\n  .catch()\n  .then()\n  .then()\n  .catch()\n  .then()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("看起来是不是有语义的多？")]),s._v(" "),n("h3",{attrs:{id:"promise链上返回的最后一个promise出错了怎么办？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise链上返回的最后一个promise出错了怎么办？","aria-hidden":"true"}},[s._v("#")]),s._v(" Promise链上返回的最后一个Promise出错了怎么办？")]),s._v(" "),n("p",[s._v("考虑如下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Promise(function(resolve) {\n  resolve(42)\n})\n  .then(function(value) {\n    alter(value)\n  })\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("乍一看好像没什么问题，但运行这段代码的话你会发现什么现象也不会发生，既不会alert出42，也不会在控制台报错，怎么回事呢。细看最后一行，"),n("code",[s._v("alert")]),s._v("被打成了"),n("code",[s._v("alter")]),s._v("，那为什么控制台也没有报错呢，因为"),n("code",[s._v("alter")]),s._v("所在的函数是被包在"),n("code",[s._v("try/catch")]),s._v("块里的，"),n("code",[s._v("alter")]),s._v("这个变量找不到就直接抛错了，这个错就正好成了then返回的Promise的rejection reason。")]),s._v(" "),n("p",[s._v("也就是说，在Promise链的最后一个then里出现的错误，非常难以发现，有文章指出，可以在所有的Promise链的最后都加上一个catch，这样出错后就能被捕获到，这种方法确实是可行的，但是首先在每个地方都加上几乎相同的代码，违背了DRY原则，其次也相当的繁琐。另外，最后一个catch依然返回一个Promise，除非你能保证这个catch里的函数不再出错，否则问题依然存在。在Q中有一个方法叫done，把这个方法链到Promise链的最后，它就能够捕获前面未处理的错误，这其实跟在每个链后面加上catch没有太大的区别，只是由框架来做了这件事，相当于它提供了一个不会出错的catch链，我们可以这么实现done方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Promise.prototype.done = function(){\n  return this.catch(function(e) { // 此处一定要确保这个函数不能再出错\n    console.error(e)\n  })\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("可是，能不能在不加catch或者done的情况下，也能够让开发者发现Promise链最后的错误呢？答案依然是肯定的。")]),s._v(" "),n("p",[s._v("我们可以在一个Promise被reject的时候检查这个Promise的onRejectedCallback数组，如果它为空，则说明它的错误将没有函数处理，这个时候，我们需要把错误输出到控制台，让开发者可以发现。以下为具体实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function reject(reason) {\n  setTimeout(function() {\n    if (self.status === 'pending') {\n      self.status = 'rejected'\n      self.data = reason\n      if (self.onRejectedCallback.length === 0) {\n        console.error(reason)\n      }\n      for (var i = 0; i < self.rejectedFn.length; i++) {\n        self.rejectedFn[i](reason)\n      }\n    }\n  })\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("上面的代码对于以下的Promise链也能处理的很好：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Promise(function(){ // promise1\n  reject(3)\n})\n  .then() // returns promise2\n  .then() // returns promise3\n  .then() // returns promise4\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("看起来，promise1，2，3，4都没有处理函数，那是不是会在控制台把这个错误输出4次呢，并不会，实际上，promise1，2，3都隐式的有处理函数，就是then的默认参数，各位应该还记得then的默认参数最终是被push到了Promise的callback数组里。只有promise4是真的没有任何callback，因为压根就没有调用它的then方法。")]),s._v(" "),n("p",[s._v("事实上，Bluebird和ES6 Promise都做了类似的处理，在Promise被reject但又没有callback时，把错误输出到控制台。")]),s._v(" "),n("p",[s._v("Q使用了done方法来达成类似的目的，$q在最新的版本中也加入了类似的功能。")]),s._v(" "),n("h3",{attrs:{id:"angular里的-q跟其它promise的交互"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#angular里的-q跟其它promise的交互","aria-hidden":"true"}},[s._v("#")]),s._v(" Angular里的$q跟其它Promise的交互")]),s._v(" "),n("p",[s._v("一般来说，我们不会在Angular里使用其它的Promise，因为Angular已经集成了$q，但有些时候我们在Angular里需要用到其它的库（比如LeanCloud的JS SDK），而这些库或是封装了ES6的Promise，或者是自己实现了Promise，这时如果你在Angular里使用这些库，就有可能发现视图跟Model不同步。究其原因，是因为$q已经集成了Angular的digest loop机制，在Promise被resolve或reject时触发digest，而其它的Promise显然是不会集成的，所以如果你运行下面这样的代码，视图是不会同步的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("app.controller(function($scope) {\n  Promise.resolve(42).then(function(value) {\n    $scope.value = value\n  })\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("Promise结束时并不会触发digest，所以视图没有同步。$q上正好有个when方法，它可以把其它的Promise转换成$q的Promise（有些Promise实现中提供了Promise.cast函数，用于将一个thenable转换为它的Promise），问题就解决了：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("app.controller(function($scope, $q) {\n  $q.when(Promise.resolve(42)).then(function(value) {\n    $scope.value = value\n  })\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("当然也有其它的解决方案比如在其它Promise的链的最后加一个digest，类似下面这样:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Promise.prototype.$digest = function() {\n  $rootScope.$digest()\n  return this\n}\n// 然后这么使用\nOtherPromise\n  .resolve(42)\n  .then(function(value) {\n    $scope.value = value\n  })\n  .$digest()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("因为使用场景并不多，此处不做深入讨论。")]),s._v(" "),n("h3",{attrs:{id:"出错时，是用throw-new-error-还是用return-promise-reject-new-error-呢？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#出错时，是用throw-new-error-还是用return-promise-reject-new-error-呢？","aria-hidden":"true"}},[s._v("#")]),s._v(" 出错时，是用throw new Error()还是用return Promise.reject(new Error())呢？")]),s._v(" "),n("p",[s._v("这里我觉得主要从性能和编码的舒适度角度考虑：")]),s._v(" "),n("p",[s._v("性能方面，"),n("code",[s._v("throw new Error()")]),s._v("会使代码进入"),n("code",[s._v("catch")]),s._v("块里的逻辑（还记得我们把所有的回调都包在try/catch里了吧），传说"),n("code",[s._v("throw")]),s._v("用多了会影响性能，因为一但"),n("code",[s._v("throw")]),s._v("，代码就有可能跳到不可预知的位置。")]),s._v(" "),n("p",[s._v("但考虑到"),n("code",[s._v("onResolved/onRejected")]),s._v("函数是直接被包在Promise实现里的"),n("code",[s._v("try")]),s._v("里，出错后就直接进入了这个"),n("code",[s._v("try")]),s._v("对应 的"),n("code",[s._v("catch")]),s._v("块，代码的跳跃“幅度”相对较小，我认为这里的性能损失可以忽略不记。有机会可以测试一下。")]),s._v(" "),n("p",[s._v("而使用"),n("code",[s._v("Promise.reject(new Error())")]),s._v("，则需要构造一个新的Promise对象（里面包含2个数组，4个函数："),n("code",[s._v("resolve/reject")]),s._v("，"),n("code",[s._v("onResolved/onRejected")]),s._v("），也会花费一定的时间和内存。")]),s._v(" "),n("p",[s._v("而从编码舒适度的角度考虑，出错用"),n("code",[s._v("throw")]),s._v("，正常时用"),n("code",[s._v("return")]),s._v("，可以比较明显的区分出错与正常，"),n("code",[s._v("throw")]),s._v("和"),n("code",[s._v("return")]),s._v("又同为关键字，用来处理对应的情况也显得比较对称(-_-)。另外在一般的编辑器里，"),n("code",[s._v("Promise.reject")]),s._v("不会被高亮成与"),n("code",[s._v("throw")]),s._v("和"),n("code",[s._v("return")]),s._v("一样的颜色。最后，如果开发者又不喜欢构造出一个"),n("code",[s._v("Error")]),s._v("对象的话，"),n("code",[s._v("Error")]),s._v("的高亮也没有了。")]),s._v(" "),n("p",[s._v("综上，我觉得在Promise里发现显式的错误后，用"),n("code",[s._v("throw")]),s._v("抛出错误会比较好，而不是显式的构造一个被reject的Promise对象。")]),s._v(" "),n("h3",{attrs:{id:"最佳实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践","aria-hidden":"true"}},[s._v("#")]),s._v(" 最佳实践")]),s._v(" "),n("p",[s._v("这里不免再啰嗦两句最佳实践")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("一是不要把Promise写成嵌套结构，至于怎么改进，这里就不多说了")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 错误的写法\npromise1.then(function(value) {\n  promise1.then(function(value) {\n    promise1.then(function(value) {\n\n    })\n  })\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("二是链式Promise要返回一个Promise，而不只是构造一个Promise")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 错误的写法\nPromise.resolve(1).then(function(){\n  Promise.resolve(2)\n}).then(function(){\n  Promise.resolve(3)\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])])]),s._v(" "),n("h3",{attrs:{id:"promise相关的convenience-method的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise相关的convenience-method的实现","aria-hidden":"true"}},[s._v("#")]),s._v(" Promise相关的convenience method的实现")]),s._v(" "),n("p",[s._v("请到"),n("a",{attrs:{href:"https://github.com/xieranmaya/Promise3",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),n("OutboundLink")],1),s._v("查看"),n("code",[s._v("Promise.race")]),s._v(", "),n("code",[s._v("Promise.all")]),s._v(", "),n("code",[s._v("Promise.resolve")]),s._v(", "),n("code",[s._v("Promise.reject")]),s._v("等方法的具体实现，这里就不具体解释了，总的来说，只要then的实现是没有问题的，其它所有的方法都可以非常方便的依赖then来实现。")])])},[],!1,null,null,null);e.default=r.exports}}]);