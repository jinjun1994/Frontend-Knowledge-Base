(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{138:function(s,e,n){"use strict";n.r(e);var a=n(3),t=Object(a.a)({},function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"引言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引言","aria-hidden":"true"}},[s._v("#")]),s._v(" 引言")]),s._v(" "),n("p",[s._v("当下，正面临着近几年来的最严重的互联网寒冬，听得最多的一句话便是：相见于江湖~🤣。缩减HC、裁员不绝于耳，大家都是人心惶惶，年前如此，年后想必肯定又是一场更为惨烈的江湖厮杀。但博主始终相信，"),n("strong",[s._v("寒冬之中，人才更是尤为珍贵。只要有过硬的操作和装备，在逆风局下，同样也能来一波收割翻盘。")])]),s._v(" "),n("p",[s._v("博主也是年前经历了一番厮杀，最终拿到多家大厂的 offer。在闭关修炼的过程中，自己整理出了一套面试秘籍供自己反复研究，后来给了多位有需要的兄台，均表示相当靠谱，理应在这寒冬之中回报于社会。于是决定花点精力整理成文，让大家能比较系统的反复学习，快速提升自己。")]),s._v(" "),n("p",[s._v("面试固然有技巧，但绝不是伪造与吹流弊，通过一段短时间沉下心来闭关修炼，出山收割，步入大厂，薪资翻番，岂不爽哉？🤓")]),s._v(" "),n("h2",{attrs:{id:"修炼原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修炼原则","aria-hidden":"true"}},[s._v("#")]),s._v(" 修炼原则")]),s._v(" "),n("p",[s._v("想必大家很厌烦笔试和考察知识点。因为其实在平时实战中，讲究的是开发效率，很少会去刻意记下一些细节和深挖知识点，脑海中都是一些分散的知识点，无法系统性地关联成网，一直处于似曾相识的状态。不知道多少人和博主一样，至今每次写阻止冒泡都需要谷歌一番如何拼写。🤪。")]),s._v(" "),n("p",[s._v("以如此的状态，定然是无法在面试的战场上纵横的。其实面试就犹如考试，大家回想下高考之前所做的事，无非就是 "),n("strong",[s._v("理解")]),s._v(" 和 "),n("strong",[s._v("系统性关联记忆")]),s._v("。本秘籍的知识点较多，花点时间一个个理解并记忆后，自然也就融会贯通，无所畏惧。")]),s._v(" "),n("p",[s._v("由于本秘籍为了便于记忆，快速达到应试状态，类似于复习知识大纲。知识点会尽量的精简与提炼知识脉络，并不去展开深入细节，面面俱到。有兴趣或者有疑问的童鞋可以自行谷歌下对应知识点的详细内容。😋")]),s._v(" "),n("h2",{attrs:{id:"css"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css","aria-hidden":"true"}},[s._v("#")]),s._v(" CSS")]),s._v(" "),n("h3",{attrs:{id:"_1-盒模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-盒模型","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. 盒模型")]),s._v(" "),n("p",[s._v("页面渲染时，dom 元素所采用的 "),n("strong",[s._v("布局模型")]),s._v("。可通过"),n("code",[s._v("box-sizing")]),s._v("进行设置。根据计算宽高的区域可分为：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("content-box")]),s._v(" (W3C 标准盒模型)")]),s._v(" "),n("li",[n("code",[s._v("border-box")]),s._v(" (IE 盒模型)")]),s._v(" "),n("li",[n("code",[s._v("padding-box")])]),s._v(" "),n("li",[n("code",[s._v("margin-box")]),s._v(" (浏览器未实现)")])]),s._v(" "),n("h3",{attrs:{id:"_2-bfc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-bfc","aria-hidden":"true"}},[s._v("#")]),s._v(" 2. BFC")]),s._v(" "),n("p",[n("strong",[s._v("块级格式化上下文")]),s._v("，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。")]),s._v(" "),n("blockquote",[n("p",[s._v("IE下为 Layout，可通过 zoom:1 触发")])]),s._v(" "),n("ul",[n("li",[s._v("触发条件:\n"),n("ul",[n("li",[s._v("根元素")]),s._v(" "),n("li",[n("code",[s._v("position: absolute/fixed")])]),s._v(" "),n("li",[n("code",[s._v("display: inline-block / table")])]),s._v(" "),n("li",[n("code",[s._v("float")]),s._v(" 元素")]),s._v(" "),n("li",[n("code",[s._v("ovevflow")]),s._v(" !== "),n("code",[s._v("visible")])])])]),s._v(" "),n("li",[s._v("规则:\n"),n("ul",[n("li",[s._v("属于同一个 BFC 的两个相邻 Box 垂直排列")]),s._v(" "),n("li",[s._v("属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠")]),s._v(" "),n("li",[s._v("BFC 中子元素的 margin box 的左边， 与包含块 (BFC) border box的左边相接触 (子元素 absolute 除外)")]),s._v(" "),n("li",[s._v("BFC 的区域不会与 float 的元素区域重叠")]),s._v(" "),n("li",[s._v("计算 BFC 的高度时，浮动子元素也参与计算")]),s._v(" "),n("li",[s._v("文字层不会被浮动层覆盖，环绕于周围")])])]),s._v(" "),n("li",[s._v("应用:\n"),n("ul",[n("li",[s._v("阻止"),n("code",[s._v("margin")]),s._v("重叠")]),s._v(" "),n("li",[s._v("可以包含浮动元素 —— 清除内部浮动(清除浮动的原理是两个"),n("code",[s._v("div")]),s._v("都位于同一个 BFC 区域之中)")]),s._v(" "),n("li",[s._v("自适应两栏布局")]),s._v(" "),n("li",[s._v("可以阻止元素被浮动元素覆盖")])])])]),s._v(" "),n("h3",{attrs:{id:"_3-层叠上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-层叠上下文","aria-hidden":"true"}},[s._v("#")]),s._v(" 3.层叠上下文")]),s._v(" "),n("p",[s._v("元素提升为一个比较特殊的图层，在三维空间中 "),n("strong",[s._v("(z轴)")]),s._v(" 高出普通元素一等。")]),s._v(" "),n("ul",[n("li",[s._v("触发条件\n"),n("ul",[n("li",[s._v("根层叠上下文("),n("code",[s._v("html")]),s._v(")")]),s._v(" "),n("li",[n("code",[s._v("position")])]),s._v(" "),n("li",[s._v("css3属性\n"),n("ul",[n("li",[n("code",[s._v("flex")])]),s._v(" "),n("li",[n("code",[s._v("transform")])]),s._v(" "),n("li",[n("code",[s._v("opacity")])]),s._v(" "),n("li",[n("code",[s._v("filter")])]),s._v(" "),n("li",[n("code",[s._v("will-change")])]),s._v(" "),n("li",[n("code",[s._v("-webkit-overflow-scrolling")])])])])])]),s._v(" "),n("li",[s._v("层叠等级：层叠上下文在z轴上的排序\n"),n("ul",[n("li",[s._v("在同一层叠上下文中，层叠等级才有意义")]),s._v(" "),n("li",[n("code",[s._v("z-index")]),s._v("的优先级最高")])])])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/14/168e9d9f3a1d368b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),s._v(" "),n("h3",{attrs:{id:"_4-居中布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-居中布局","aria-hidden":"true"}},[s._v("#")]),s._v(" 4. 居中布局")]),s._v(" "),n("ul",[n("li",[s._v("水平居中\n"),n("ul",[n("li",[s._v("行内元素: "),n("code",[s._v("text-align: center")])]),s._v(" "),n("li",[s._v("块级元素: "),n("code",[s._v("margin: 0 auto")])]),s._v(" "),n("li",[n("code",[s._v("absolute + transform")])]),s._v(" "),n("li",[n("code",[s._v("flex + justify-content: center")])])])]),s._v(" "),n("li",[s._v("垂直居中\n"),n("ul",[n("li",[n("code",[s._v("line-height: height")])]),s._v(" "),n("li",[n("code",[s._v("absolute + transform")])]),s._v(" "),n("li",[n("code",[s._v("flex + align-items: center")])]),s._v(" "),n("li",[n("code",[s._v("table")])])])]),s._v(" "),n("li",[s._v("水平垂直居中\n"),n("ul",[n("li",[n("code",[s._v("absolute + transform")])]),s._v(" "),n("li",[n("code",[s._v("flex + justify-content + align-items")])])])])]),s._v(" "),n("h3",{attrs:{id:"_5-选择器优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-选择器优先级","aria-hidden":"true"}},[s._v("#")]),s._v(" 5. 选择器优先级")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("!important")]),s._v(" > 行内样式 > "),n("code",[s._v("#id")]),s._v(" > "),n("code",[s._v(".class")]),s._v(" > "),n("code",[s._v("tag")]),s._v(" > * > 继承 > 默认")]),s._v(" "),n("li",[s._v("选择器 "),n("strong",[s._v("从右往左")]),s._v(" 解析")])]),s._v(" "),n("h3",{attrs:{id:"_6-去除浮动影响，防止父级高度塌陷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-去除浮动影响，防止父级高度塌陷","aria-hidden":"true"}},[s._v("#")]),s._v(" 6.去除浮动影响，防止父级高度塌陷")]),s._v(" "),n("ul",[n("li",[s._v("通过增加尾元素清除浮动\n"),n("ul",[n("li",[n("code",[s._v(":after / <br> : clear: both")])])])]),s._v(" "),n("li",[s._v("创建父级 BFC")]),s._v(" "),n("li",[s._v("父级设置高度")])]),s._v(" "),n("h3",{attrs:{id:"_7-link-与-import-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-link-与-import-的区别","aria-hidden":"true"}},[s._v("#")]),s._v(" 7.link 与 @import 的区别")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("link")]),s._v("功能较多，可以定义 RSS，定义 Rel 等作用，而"),n("code",[s._v("@import")]),s._v("只能用于加载 css")]),s._v(" "),n("li",[s._v("当解析到"),n("code",[s._v("link")]),s._v("时，页面会同步加载所引的 css，而"),n("code",[s._v("@import")]),s._v("所引用的 css 会等到页面加载完才被加载")]),s._v(" "),n("li",[n("code",[s._v("@import")]),s._v("需要 IE5 以上才能使用")]),s._v(" "),n("li",[n("code",[s._v("link")]),s._v("可以使用 js 动态引入，"),n("code",[s._v("@import")]),s._v("不行")])]),s._v(" "),n("h3",{attrs:{id:"_8-css预处理器-sass-less-postcss"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-css预处理器-sass-less-postcss","aria-hidden":"true"}},[s._v("#")]),s._v(" 8. CSS预处理器(Sass/Less/Postcss)")]),s._v(" "),n("p",[s._v("CSS预处理器的原理: 是将类 CSS 语言通过 "),n("strong",[s._v("Webpack 编译")]),s._v(" 转成浏览器可读的真正 CSS。在这层编译之上，便可以赋予 CSS 更多更强大的功能，常用功能:")]),s._v(" "),n("ul",[n("li",[s._v("嵌套")]),s._v(" "),n("li",[s._v("变量")]),s._v(" "),n("li",[s._v("循环语句")]),s._v(" "),n("li",[s._v("条件语句")]),s._v(" "),n("li",[s._v("自动前缀")]),s._v(" "),n("li",[s._v("单位转换")]),s._v(" "),n("li",[s._v("mixin复用")])]),s._v(" "),n("p",[s._v("面试中一般不会重点考察该点，一般介绍下自己在实战项目中的经验即可~")]),s._v(" "),n("h3",{attrs:{id:"_9-css动画"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-css动画","aria-hidden":"true"}},[s._v("#")]),s._v(" 9.CSS动画")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("transition")]),s._v(": 过渡动画")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("transition-property")]),s._v(": 属性")]),s._v(" "),n("li",[n("code",[s._v("transition-duration")]),s._v(": 间隔")]),s._v(" "),n("li",[n("code",[s._v("transition-timing-function")]),s._v(": 曲线")]),s._v(" "),n("li",[n("code",[s._v("transition-delay")]),s._v(": 延迟")]),s._v(" "),n("li",[s._v("常用钩子: "),n("code",[s._v("transitionend")])])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("animation / keyframes")])]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("animation-name")]),s._v(": 动画名称，对应"),n("code",[s._v("@keyframes")])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("animation-duration")]),s._v(": 间隔")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("animation-timing-function")]),s._v(": 曲线")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("animation-delay")]),s._v(": 延迟")])]),s._v(" "),n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("animation-iteration-count\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v(": 次数")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("infinite")]),s._v(": 循环动画")])])]),s._v(" "),n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("animation-direction\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v(": 方向")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("alternate")]),s._v(": 反向播放")])])]),s._v(" "),n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("animation-fill-mode\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v(": 静止模式")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("forwards")]),s._v(": 停止时，保留最后一帧")]),s._v(" "),n("li",[n("code",[s._v("backwards")]),s._v(": 停止时，回到第一帧")]),s._v(" "),n("li",[n("code",[s._v("both")]),s._v(": 同时运用 "),n("code",[s._v("forwards / backwards")])])])]),s._v(" "),n("li",[n("p",[s._v("常用钩子: "),n("code",[s._v("animationend")])])])])]),s._v(" "),n("li",[n("p",[s._v("动画属性: 尽量使用动画属性进行动画，能拥有较好的性能表现")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("translate")])]),s._v(" "),n("li",[n("code",[s._v("scale")])]),s._v(" "),n("li",[n("code",[s._v("rotate")])]),s._v(" "),n("li",[n("code",[s._v("skew")])]),s._v(" "),n("li",[n("code",[s._v("opacity")])]),s._v(" "),n("li",[n("code",[s._v("color")])])])])]),s._v(" "),n("h3",{attrs:{id:"经验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#经验","aria-hidden":"true"}},[s._v("#")]),s._v(" 经验")]),s._v(" "),n("p",[s._v("通常，CSS 并不是重点的考察领域，但这其实是由于现在国内业界对 CSS 的专注不够导致的，真正精通并专注于 CSS 的团队和人才并不多。因此如果能在 CSS 领域有自己的见解和经验，反而会为相当的加分和脱颖而出。")]),s._v(" "),n("h2",{attrs:{id:"javascript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript","aria-hidden":"true"}},[s._v("#")]),s._v(" JavaScript")]),s._v(" "),n("h3",{attrs:{id:"_1-原型-构造函数-实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-原型-构造函数-实例","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. 原型 / 构造函数 / 实例")]),s._v(" "),n("ul",[n("li",[s._v("原型"),n("code",[s._v("(prototype)")]),s._v(": 一个简单的对象，用于实现对象的 "),n("strong",[s._v("属性继承")]),s._v("。可以简单的理解成对象的爹。在 Firefox 和 Chrome 中，每个"),n("code",[s._v("JavaScript")]),s._v("对象中都包含一个"),n("code",[s._v("__proto__")]),s._v(" (非标准)的属性指向它爹(该对象的原型)，可"),n("code",[s._v("obj.__proto__")]),s._v("进行访问。")]),s._v(" "),n("li",[s._v("构造函数: 可以通过"),n("code",[s._v("new")]),s._v("来 "),n("strong",[s._v("新建一个对象")]),s._v(" 的函数。")]),s._v(" "),n("li",[s._v("实例: 通过构造函数和"),n("code",[s._v("new")]),s._v("创建出来的对象，便是实例。 "),n("strong",[s._v("实例通过__proto__指向原型，通过constructor指向构造函数")]),s._v("。")])]),s._v(" "),n("p",[s._v("说了一大堆，大家可能有点懵逼，这里来举个栗子，以"),n("code",[s._v("Object")]),s._v("为例，我们常用的"),n("code",[s._v("Object")]),s._v("便是一个构造函数，因此我们可以通过它构建实例。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 实例\nconst instance = new Object()\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("则此时， "),n("strong",[s._v("实例为instance")]),s._v(", "),n("strong",[s._v("构造函数为Object")]),s._v("，我们知道，构造函数拥有一个"),n("code",[s._v("prototype")]),s._v("的属性指向原型，因此原型为:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 原型\nconst prototype = Object.prototype\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("这里我们可以来看出三者的关系:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("实例.__proto__ === 原型\n\n原型.constructor === 构造函数\n\n构造函数.prototype === 原型\n\n// 这条线其实是是基于原型进行获取的，可以理解成一条基于原型的映射线\n// 例如: \n// const o = new Object()\n// o.constructor === Object   --\x3e true\n// o.__proto__ = null;\n// o.constructor === Object   --\x3e false\n实例.constructor === 构造函数\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("blockquote",[n("p",[s._v("此处感谢 caihaihong 童鞋的指出。")])]),s._v(" "),n("p",[s._v("放大来看，我画了张图供大家彻底理解:")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/14/168e9d9b940c4c6f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),s._v(" "),n("h3",{attrs:{id:"_2-原型链："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型链：","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.原型链：")]),s._v(" "),n("p",[n("strong",[s._v("原型链是由原型对象组成")]),s._v("，每个对象都有 "),n("code",[s._v("__proto__")]),s._v(" 属性，指向了创建该对象的构造函数的原型，"),n("code",[s._v("__proto__")]),s._v(" 将对象连接起来组成了原型链。是一个用来"),n("strong",[s._v("实现继承和共享属性")]),s._v("的有限的对象链。")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("属性查找机制")]),s._v(": 当查找对象的属性时，如果实例对象自身不存在该属性，则沿着原型链往上一级查找，找到时则输出，不存在时，则继续沿着原型链往上一级查找，直至最顶级的原型对象"),n("code",[s._v("Object.prototype")]),s._v("，如还是没找到，则输出"),n("code",[s._v("undefined")]),s._v("；")]),s._v(" "),n("li",[n("strong",[s._v("属性修改机制")]),s._v(": 只会修改实例对象本身的属性，如果不存在，则进行添加该属性，如果需要修改原型的属性时，则可以用: "),n("code",[s._v("b.prototype.x = 2")]),s._v("；但是这样会造成所有继承于该对象的实例的属性发生改变。")])]),s._v(" "),n("h3",{attrs:{id:"_3-执行上下文-ec"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行上下文-ec","aria-hidden":"true"}},[s._v("#")]),s._v(" 3. 执行上下文(EC)")]),s._v(" "),n("p",[s._v("执行上下文可以简单理解为一个对象:")]),s._v(" "),n("ul",[n("li",[s._v("它包含三个部分:\n"),n("ul",[n("li",[s._v("变量对象(VO)")]),s._v(" "),n("li",[s._v("作用域链(词法作用域)")]),s._v(" "),n("li",[n("code",[s._v("this")]),s._v("指向")])])]),s._v(" "),n("li",[s._v("它的类型:\n"),n("ul",[n("li",[s._v("全局执行上下文")]),s._v(" "),n("li",[s._v("函数执行上下文")]),s._v(" "),n("li",[n("code",[s._v("eval")]),s._v("执行上下文")])])]),s._v(" "),n("li",[s._v("代码执行过程:\n"),n("ul",[n("li",[s._v("创建 "),n("strong",[s._v("全局上下文")]),s._v(" (global EC)")]),s._v(" "),n("li",[s._v("全局执行上下文 (caller) 逐行 "),n("strong",[s._v("自上而下")]),s._v(" 执行。遇到函数时，"),n("strong",[s._v("函数执行上下文")]),s._v(" (callee) 被"),n("code",[s._v("push")]),s._v("到执行栈顶层")]),s._v(" "),n("li",[s._v("函数执行上下文被激活，成为 active EC, 开始执行函数中的代码，caller 被挂起")]),s._v(" "),n("li",[s._v("函数执行完后，callee 被"),n("code",[s._v("pop")]),s._v("移除出执行栈，控制权交还全局上下文 (caller)，继续执行")])])])]),s._v(" "),n("h3",{attrs:{id:"_2-变量对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-变量对象","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.变量对象")]),s._v(" "),n("p",[s._v("变量对象，是执行上下文中的一部分，可以抽象为一种 "),n("strong",[s._v("数据作用域")]),s._v("，其实也可以理解为就是一个简单的对象，它存储着该执行上下文中的所有 "),n("strong",[s._v("变量和函数声明(不包含函数表达式)")]),s._v("。")]),s._v(" "),n("blockquote",[n("p",[s._v("活动对象 (AO): 当变量对象所处的上下文为 active EC 时，称为活动对象。")])]),s._v(" "),n("h3",{attrs:{id:"_3-作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-作用域","aria-hidden":"true"}},[s._v("#")]),s._v(" 3. 作用域")]),s._v(" "),n("p",[s._v("执行上下文中还包含作用域链。理解作用域之前，先介绍下作用域。作用域其实可理解为该上下文中声明的 "),n("strong",[s._v("变量和声明的作用范围")]),s._v("。可分为 "),n("strong",[s._v("块级作用域")]),s._v(" 和 "),n("strong",[s._v("函数作用域")])]),s._v(" "),n("p",[s._v("特性:")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("声明提前")]),s._v(": 一个声明在函数体内都是可见的, 函数优先于变量")]),s._v(" "),n("li",[s._v("非匿名自执行函数，函数变量为 "),n("strong",[s._v("只读")]),s._v(" 状态，无法修改")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let foo = function() { console.log(1) }\n(function foo() {\n    foo = 10  // 由于foo在函数中只为可读，因此赋值无效\n    console.log(foo)\n}()) \n\n// 结果打印：  ƒ foo() { foo = 10 ; console.log(foo) }\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"_4-作用域链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-作用域链","aria-hidden":"true"}},[s._v("#")]),s._v(" 4.作用域链")]),s._v(" "),n("p",[s._v("我们知道，我们可以在执行上下文中访问到父级甚至全局的变量，这便是作用域链的功劳。作用域链可以理解为一组对象列表，包含 "),n("strong",[s._v("父级和自身的变量对象")]),s._v("，因此我们便能通过作用域链访问到父级里声明的变量或者函数。")]),s._v(" "),n("ul",[n("li",[s._v("由两部分组成:\n"),n("ul",[n("li",[n("code",[s._v("[[scope]]")]),s._v("属性: 指向父级变量对象和作用域链，也就是包含了父级的"),n("code",[s._v("[[scope]]")]),s._v("和"),n("code",[s._v("AO")])]),s._v(" "),n("li",[s._v("AO: 自身活动对象")])])])]),s._v(" "),n("p",[s._v("如此 "),n("code",[s._v("[[scopr]]")]),s._v("包含"),n("code",[s._v("[[scope]]")]),s._v("，便自上而下形成一条 "),n("strong",[s._v("链式作用域")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"_5-闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-闭包","aria-hidden":"true"}},[s._v("#")]),s._v(" 5. 闭包")]),s._v(" "),n("p",[s._v("闭包属于一种特殊的作用域，称为 "),n("strong",[s._v("静态作用域")]),s._v("。它的定义可以理解为: "),n("strong",[s._v("父函数被销毁")]),s._v(" 的情况下，返回出的子函数的"),n("code",[s._v("[[scope]]")]),s._v("中仍然保留着父级的单变量对象和作用域链，因此可以继续访问到父级的变量对象，这样的函数称为闭包。")]),s._v(" "),n("ul",[n("li",[s._v("闭包会产生一个很经典的问题:\n"),n("ul",[n("li",[s._v("多个子函数的"),n("code",[s._v("[[scope]]")]),s._v("都是同时指向父级，是完全共享的。因此当父级的变量对象被修改时，所有子函数都受到影响。")])])]),s._v(" "),n("li",[s._v("解决:\n"),n("ul",[n("li",[s._v("变量可以通过 "),n("strong",[s._v("函数参数的形式")]),s._v(" 传入，避免使用默认的"),n("code",[s._v("[[scope]]")]),s._v("向上查找")]),s._v(" "),n("li",[s._v("使用"),n("code",[s._v("setTimeout")]),s._v("包裹，通过第三个参数传入")]),s._v(" "),n("li",[s._v("使用 "),n("strong",[s._v("块级作用域")]),s._v("，让变量成为自己上下文的属性，避免共享")])])])]),s._v(" "),n("h3",{attrs:{id:"_6-script-引入方式："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-script-引入方式：","aria-hidden":"true"}},[s._v("#")]),s._v(" 6. script 引入方式：")]),s._v(" "),n("ul",[n("li",[s._v("html 静态"),n("code",[s._v("<script>")]),s._v("引入")]),s._v(" "),n("li",[s._v("js 动态插入"),n("code",[s._v("<script>")])]),s._v(" "),n("li",[n("code",[s._v("<script defer>")]),s._v(": 异步加载，元素解析完成后执行")]),s._v(" "),n("li",[n("code",[s._v("<script async>")]),s._v(": 异步加载，但执行时会阻塞元素渲染")])]),s._v(" "),n("h3",{attrs:{id:"_7-对象的拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-对象的拷贝","aria-hidden":"true"}},[s._v("#")]),s._v(" 7. 对象的拷贝")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("浅拷贝: 以赋值的形式拷贝引用对象，仍指向同一个地址，"),n("strong",[s._v("修改时原对象也会受到影响")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("Object.assign")])]),s._v(" "),n("li",[s._v("展开运算符(...)")])])]),s._v(" "),n("li",[n("p",[s._v("深拷贝: 完全拷贝一个新对象，"),n("strong",[s._v("修改时原对象不再受到任何影响")])]),s._v(" "),n("ul",[n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("JSON.parse(JSON.stringify(obj))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v(": 性能最快")]),s._v(" "),n("ul",[n("li",[s._v("具有循环引用的对象时，报错")]),s._v(" "),n("li",[s._v("当值为函数、"),n("code",[s._v("undefined")]),s._v("、或"),n("code",[s._v("symbol")]),s._v("时，无法拷贝")])])]),s._v(" "),n("li",[n("p",[s._v("递归进行逐一赋值")])])])])]),s._v(" "),n("h3",{attrs:{id:"_8-new运算符的执行过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-new运算符的执行过程","aria-hidden":"true"}},[s._v("#")]),s._v(" 8. new运算符的执行过程")]),s._v(" "),n("ul",[n("li",[s._v("新生成一个对象")]),s._v(" "),n("li",[s._v("链接到原型:  "),n("code",[s._v("obj.__proto__ = Con.prototype")])]),s._v(" "),n("li",[s._v("绑定this: "),n("code",[s._v("apply")])]),s._v(" "),n("li",[s._v("返回新对象(如果构造函数有自己 retrun 时，则返回该值)")])]),s._v(" "),n("h3",{attrs:{id:"_9-instanceof原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-instanceof原理","aria-hidden":"true"}},[s._v("#")]),s._v(" 9. instanceof原理")]),s._v(" "),n("p",[s._v("能在实例的 "),n("strong",[s._v("原型对象链")]),s._v(" 中找到该构造函数的"),n("code",[s._v("prototype")]),s._v("属性所指向的 "),n("strong",[s._v("原型对象")]),s._v("，就返回"),n("code",[s._v("true")]),s._v("。即:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// __proto__: 代表原型对象链\ninstance.[__proto__...] === instance.constructor.prototype\n\n// return true\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"_10-代码的复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-代码的复用","aria-hidden":"true"}},[s._v("#")]),s._v(" 10. 代码的复用")]),s._v(" "),n("p",[s._v("当你发现任何代码开始写第二遍时，就要开始考虑如何复用。一般有以下的方式:")]),s._v(" "),n("ul",[n("li",[s._v("函数封装")]),s._v(" "),n("li",[s._v("继承")]),s._v(" "),n("li",[s._v("复制"),n("code",[s._v("extend")])]),s._v(" "),n("li",[s._v("混入"),n("code",[s._v("mixin")])]),s._v(" "),n("li",[s._v("借用"),n("code",[s._v("apply/call")])])]),s._v(" "),n("h3",{attrs:{id:"_11-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-继承","aria-hidden":"true"}},[s._v("#")]),s._v(" 11. 继承")]),s._v(" "),n("p",[s._v("在 JS 中，继承通常指的便是 "),n("strong",[s._v("原型链继承")]),s._v("，也就是通过指定原型，并可以通过原型链继承原型上的属性或者方法。")]),s._v(" "),n("ul",[n("li",[s._v("最优化: "),n("strong",[s._v("圣杯模式")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var inherit = (function(c,p){\n\tvar F = function(){};\n\treturn function(c,p){\n\t\tF.prototype = p.prototype;\n\t\tc.prototype = new F();\n\t\tc.uber = p.prototype;\n\t\tc.prototype.constructor = c;\n\t}\n})();\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("ul",[n("li",[s._v("使用 ES6 的语法糖 "),n("code",[s._v("class / extends")])])]),s._v(" "),n("h3",{attrs:{id:"_12-类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-类型转换","aria-hidden":"true"}},[s._v("#")]),s._v(" 12. 类型转换")]),s._v(" "),n("p",[s._v("大家都知道 JS 中在使用运算符号或者对比符时，会自带隐式转换，规则如下:")]),s._v(" "),n("ul",[n("li",[s._v("-、*、/、% ：一律转换成数值后计算")]),s._v(" "),n("li",[s._v("+：\n"),n("ul",[n("li",[s._v("数字 + 字符串 = 字符串， 运算顺序是从左到右")]),s._v(" "),n("li",[s._v("数字 + 对象， 优先调用对象的"),n("code",[s._v("valueOf")]),s._v(" -> "),n("code",[s._v("toString")])]),s._v(" "),n("li",[s._v("数字 + "),n("code",[s._v("boolean/null")]),s._v(" -> 数字")]),s._v(" "),n("li",[s._v("数字 + "),n("code",[s._v("undefined")]),s._v(" -> "),n("code",[s._v("NaN")])])])]),s._v(" "),n("li",[n("code",[s._v("[1].toString() === '1'")])]),s._v(" "),n("li",[n("code",[s._v("{}.toString() === '[object object]'")])]),s._v(" "),n("li",[n("code",[s._v("NaN")]),s._v(" !== "),n("code",[s._v("NaN")]),s._v(" 、"),n("code",[s._v("+undefined 为 NaN")])])]),s._v(" "),n("h3",{attrs:{id:"_13-类型判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-类型判断","aria-hidden":"true"}},[s._v("#")]),s._v(" 13. 类型判断")]),s._v(" "),n("p",[s._v("判断 Target 的类型，单单用 typeof 并无法完全满足，这其实并不是 bug，本质原因是 JS 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待:")]),s._v(" "),n("ul",[n("li",[s._v("基本类型("),n("code",[s._v("null")]),s._v("): 使用 "),n("code",[s._v("String(null)")])]),s._v(" "),n("li",[s._v("基本类型("),n("code",[s._v("string / number / boolean / undefined")]),s._v(") + "),n("code",[s._v("function")]),s._v(": 直接使用 "),n("code",[s._v("typeof")]),s._v("即可")]),s._v(" "),n("li",[s._v("其余引用类型("),n("code",[s._v("Array / Date / RegExp Error")]),s._v("): 调用"),n("code",[s._v("toString")]),s._v("后根据"),n("code",[s._v("[object XXX]")]),s._v("进行判断")])]),s._v(" "),n("p",[s._v("很稳的判断封装:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let class2type = {}\n'Array Date RegExp Object Error'.split(' ').forEach(e => class2type[ '[object ' + e + ']' ] = e.toLowerCase()) \n\nfunction type(obj) {\n    if (obj == null) return String(obj)\n    return typeof obj === 'object' ? class2type[ Object.prototype.toString.call(obj) ] || 'object' : typeof obj\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"_14-模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-模块化","aria-hidden":"true"}},[s._v("#")]),s._v(" 14. 模块化")]),s._v(" "),n("p",[s._v("模块化开发在现代开发中已是必不可少的一部分，它大大提高了项目的可维护、可拓展和可协作性。通常，我们 "),n("strong",[s._v("在浏览器中使用 ES6 的模块化支持，在 Node 中使用 commonjs 的模块化支持。")])]),s._v(" "),n("ul",[n("li",[s._v("分类:\n"),n("ul",[n("li",[s._v("es6: "),n("code",[s._v("import / export")])]),s._v(" "),n("li",[s._v("commonjs: "),n("code",[s._v("require / module.exports / exports")])]),s._v(" "),n("li",[s._v("amd: "),n("code",[s._v("require / defined")])])])]),s._v(" "),n("li",[n("code",[s._v("require")]),s._v("与"),n("code",[s._v("import")]),s._v("的区别\n"),n("ul",[n("li",[n("code",[s._v("require")]),s._v("支持 "),n("strong",[s._v("动态导入")]),s._v("，"),n("code",[s._v("import")]),s._v("不支持，正在提案 (babel 下可支持)")]),s._v(" "),n("li",[n("code",[s._v("require")]),s._v("是 "),n("strong",[s._v("同步")]),s._v(" 导入，"),n("code",[s._v("import")]),s._v("属于 "),n("strong",[s._v("异步")]),s._v(" 导入")]),s._v(" "),n("li",[n("code",[s._v("require")]),s._v("是 "),n("strong",[s._v("值拷贝")]),s._v("，导出值变化不会影响导入值；"),n("code",[s._v("import")]),s._v("指向 "),n("strong",[s._v("内存地址")]),s._v("，导入值会随导出值而变化")])])])]),s._v(" "),n("h3",{attrs:{id:"_15-防抖与节流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-防抖与节流","aria-hidden":"true"}},[s._v("#")]),s._v(" 15. 防抖与节流")]),s._v(" "),n("p",[s._v("防抖与节流函数是一种最常用的 "),n("strong",[s._v("高频触发优化方式")]),s._v("，能对性能有较大的帮助。")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("防抖 (debounce)")]),s._v(": 将多次高频操作优化为只在最后一次执行，通常使用的场景是：用户输入，只需再输入完成后做一次输入校验即可。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function debounce(fn, wait, immediate) {\n    let timer = null\n\n    return function() {\n        let args = arguments\n        let context = this\n\n        if (immediate && !timer) {\n            fn.apply(context, args)\n        }\n\n        if (timer) clearTimeout(timer)\n        timer = setTimeout(() => {\n            fn.apply(context, args)\n        }, wait)\n    }\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("节流(throttle)")]),s._v(": 每隔一段时间后执行一次，也就是降低频率，将高频操作优化成低频操作，通常使用场景: 滚动条事件 或者 resize 事件，通常每隔 100~500 ms执行一次即可。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function throttle(fn, wait, immediate) {\n    let timer = null\n    let callNow = immediate\n    \n    return function() {\n        let context = this,\n            args = arguments\n\n        if (callNow) {\n            fn.apply(context, args)\n            callNow = false\n        }\n\n        if (!timer) {\n            timer = setTimeout(() => {\n                fn.apply(context, args)\n                timer = null\n            }, wait)\n        }\n    }\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"_16-函数执行改变this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-函数执行改变this","aria-hidden":"true"}},[s._v("#")]),s._v(" 16. 函数执行改变this")]),s._v(" "),n("p",[s._v("由于 JS 的设计原理: 在函数中，可以引用运行环境中的变量。因此就需要一个机制来让我们可以在函数体内部获取当前的运行环境，这便是"),n("code",[s._v("this")]),s._v("。")]),s._v(" "),n("p",[s._v("因此要明白 "),n("code",[s._v("this")]),s._v(" 指向，其实就是要搞清楚 函数的运行环境，说人话就是，谁调用了函数。例如:")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("obj.fn()")]),s._v("，便是 "),n("code",[s._v("obj")]),s._v(" 调用了函数，既函数中的 "),n("code",[s._v("this === obj")])]),s._v(" "),n("li",[n("code",[s._v("fn()")]),s._v("，这里可以看成 "),n("code",[s._v("window.fn()")]),s._v("，因此 "),n("code",[s._v("this === window")])])]),s._v(" "),n("p",[s._v("但这种机制并不完全能满足我们的业务需求，因此提供了三种方式可以手动修改 "),n("code",[s._v("this")]),s._v(" 的指向:")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("call: fn.call(target, 1, 2)")])]),s._v(" "),n("li",[n("code",[s._v("apply: fn.apply(target, [1, 2])")])]),s._v(" "),n("li",[n("code",[s._v("bind: fn.bind(target)(1,2)")])])]),s._v(" "),n("h3",{attrs:{id:"_17-es6-es7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-es6-es7","aria-hidden":"true"}},[s._v("#")]),s._v(" 17. ES6/ES7")]),s._v(" "),n("p",[s._v("由于 Babel 的强大和普及，现在 ES6/ES7 基本上已经是现代化开发的必备了。通过新的语法糖，能让代码整体更为简洁和易读。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("声明")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("let / const")]),s._v(": 块级作用域、不存在变量提升、暂时性死区、不允许重复声明")]),s._v(" "),n("li",[n("code",[s._v("const")]),s._v(": 声明常量，无法修改")])])]),s._v(" "),n("li",[n("p",[s._v("解构赋值")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("class / extend")]),s._v(": 类声明与继承")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("Set / Map")]),s._v(": 新的数据结构")])]),s._v(" "),n("li",[n("p",[s._v("异步解决方案:")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("Promise")]),s._v("的使用与实现")]),s._v(" "),n("li",[n("code",[s._v("generator")]),s._v(":\n"),n("ul",[n("li",[n("code",[s._v("yield")]),s._v(": 暂停代码")]),s._v(" "),n("li",[n("code",[s._v("next()")]),s._v(": 继续执行代码")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function* helloWorld() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nconst generator = helloWorld();\n\ngenerator.next()  // { value: 'hello', done: false }\n\ngenerator.next()  // { value: 'world', done: false }\n\ngenerator.next()  // { value: 'ending', done: true }\n\ngenerator.next()  // { value: undefined, done: true }\n\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("await / async")]),s._v(": 是"),n("code",[s._v("generator")]),s._v("的语法糖， babel中是基于"),n("code",[s._v("promise")]),s._v("实现。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("async function getUserByAsync(){\n   let user = await fetchUser();\n   return user;\n}\n\nconst user = await getUserByAsync()\nconsole.log(user)\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])])]),s._v(" "),n("h3",{attrs:{id:"_18-ast"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-ast","aria-hidden":"true"}},[s._v("#")]),s._v(" 18. AST")]),s._v(" "),n("p",[n("strong",[s._v("抽象语法树 (Abstract Syntax Tree)")]),s._v("，是将代码逐字母解析成 "),n("strong",[s._v("树状对象")]),s._v(" 的形式。这是语言之间的转换、代码语法检查，代码风格检查，代码格式化，代码高亮，代码错误提示，代码自动补全等等的基础。例如:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function square(n){\n\treturn n * n\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("通过解析转化成的"),n("code",[s._v("AST")]),s._v("如下图:")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/14/168e9d95910dd187?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),s._v(" "),n("h3",{attrs:{id:"_19-babel编译原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19-babel编译原理","aria-hidden":"true"}},[s._v("#")]),s._v(" 19. babel编译原理")]),s._v(" "),n("ul",[n("li",[s._v("babylon 将 ES6/ES7 代码解析成 AST")]),s._v(" "),n("li",[s._v("babel-traverse 对 AST 进行遍历转译，得到新的 AST")]),s._v(" "),n("li",[s._v("新 AST 通过 babel-generator 转换成 ES5")])]),s._v(" "),n("h3",{attrs:{id:"_20-函数柯里化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-函数柯里化","aria-hidden":"true"}},[s._v("#")]),s._v(" 20. 函数柯里化")]),s._v(" "),n("p",[s._v("在一个函数中，首先填充几个参数，然后再返回一个新的函数的技术，称为函数的柯里化。通常可用于在不侵入函数的前提下，为函数 "),n("strong",[s._v("预置通用参数")]),s._v("，供多次重复调用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const add = function add(x) {\n\treturn function (y) {\n\t\treturn x + y\n\t}\n}\n\nconst add1 = add(1)\n\nadd1(2) === 3\nadd1(20) === 21\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"_21-数组-array"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21-数组-array","aria-hidden":"true"}},[s._v("#")]),s._v(" 21. 数组(array)")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("map")]),s._v(": 遍历数组，返回回调返回值组成的新数组")]),s._v(" "),n("li",[n("code",[s._v("forEach")]),s._v(": 无法"),n("code",[s._v("break")]),s._v("，可以用"),n("code",[s._v("try/catch")]),s._v("中"),n("code",[s._v("throw new Error")]),s._v("来停止")]),s._v(" "),n("li",[n("code",[s._v("filter")]),s._v(": 过滤")]),s._v(" "),n("li",[n("code",[s._v("some")]),s._v(": 有一项返回"),n("code",[s._v("true")]),s._v("，则整体为"),n("code",[s._v("true")])]),s._v(" "),n("li",[n("code",[s._v("every")]),s._v(": 有一项返回"),n("code",[s._v("false")]),s._v("，则整体为"),n("code",[s._v("false")])]),s._v(" "),n("li",[n("code",[s._v("join")]),s._v(": 通过指定连接符生成字符串")]),s._v(" "),n("li",[n("code",[s._v("push / pop")]),s._v(": 末尾推入和弹出，改变原数组， 返回推入/弹出项")]),s._v(" "),n("li",[n("code",[s._v("unshift / shift")]),s._v(": 头部推入和弹出，改变原数组，返回操作项")]),s._v(" "),n("li",[n("code",[s._v("sort(fn) / reverse")]),s._v(": 排序与反转，改变原数组")]),s._v(" "),n("li",[n("code",[s._v("concat")]),s._v(": 连接数组，不影响原数组， 浅拷贝")]),s._v(" "),n("li",[n("code",[s._v("slice(start, end)")]),s._v(": 返回截断后的新数组，不改变原数组")]),s._v(" "),n("li",[n("code",[s._v("splice(start, number, value...)")]),s._v(": 返回删除元素组成的数组，value 为插入项，改变原数组")]),s._v(" "),n("li",[n("code",[s._v("indexOf / lastIndexOf(value, fromIndex)")]),s._v(": 查找数组项，返回对应的下标")]),s._v(" "),n("li",[n("code",[s._v("reduce / reduceRight(fn(prev, cur)， defaultPrev)")]),s._v(": 两两执行，prev 为上次化简函数的"),n("code",[s._v("return")]),s._v("值，cur 为当前值(从第二项开始)")]),s._v(" "),n("li",[s._v("数组乱序：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\narr.sort(function () {\n    return Math.random() - 0.5;\n});\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("数组拆解: flat: [1,[2,3]] --\x3e [1, 2, 3]")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.prototype.flat = function() {\n    this.toString().split(',').map(item => +item )\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"浏览器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器","aria-hidden":"true"}},[s._v("#")]),s._v(" 浏览器")]),s._v(" "),n("h3",{attrs:{id:"_1-跨标签页通讯"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-跨标签页通讯","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. 跨标签页通讯")]),s._v(" "),n("p",[s._v("不同标签页间的通讯，本质原理就是去运用一些可以 "),n("strong",[s._v("共享的中间介质")]),s._v("，因此比较常用的有以下方法:")]),s._v(" "),n("ul",[n("li",[s._v("通过父页面"),n("code",[s._v("window.open()")]),s._v("和子页面"),n("code",[s._v("postMessage")]),s._v(" "),n("ul",[n("li",[s._v("异步下，通过 "),n("code",[s._v("window.open('about: blank')")]),s._v(" 和 "),n("code",[s._v("tab.location.href = '*'")])])])]),s._v(" "),n("li",[s._v("设置同域下共享的"),n("code",[s._v("localStorage")]),s._v("与监听"),n("code",[s._v("window.onstorage")]),s._v(" "),n("ul",[n("li",[s._v("重复写入相同的值无法触发")]),s._v(" "),n("li",[s._v("会受到浏览器隐身模式等的限制")])])]),s._v(" "),n("li",[s._v("设置共享"),n("code",[s._v("cookie")]),s._v("与不断轮询脏检查("),n("code",[s._v("setInterval")]),s._v(")")]),s._v(" "),n("li",[s._v("借助服务端或者中间层实现")])]),s._v(" "),n("h3",{attrs:{id:"_2-浏览器架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器架构","aria-hidden":"true"}},[s._v("#")]),s._v(" 2. 浏览器架构")]),s._v(" "),n("ul",[n("li",[s._v("用户界面")]),s._v(" "),n("li",[s._v("主进程")]),s._v(" "),n("li",[s._v("内核\n"),n("ul",[n("li",[s._v("渲染引擎")]),s._v(" "),n("li",[s._v("JS 引擎\n"),n("ul",[n("li",[s._v("执行栈")])])]),s._v(" "),n("li",[s._v("事件触发线程\n"),n("ul",[n("li",[s._v("消息队列\n"),n("ul",[n("li",[s._v("微任务")]),s._v(" "),n("li",[s._v("宏任务")])])])])]),s._v(" "),n("li",[s._v("网络异步线程")]),s._v(" "),n("li",[s._v("定时器线程")])])])]),s._v(" "),n("h3",{attrs:{id:"_3-浏览器下事件循环-event-loop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-浏览器下事件循环-event-loop","aria-hidden":"true"}},[s._v("#")]),s._v(" 3. 浏览器下事件循环(Event Loop)")]),s._v(" "),n("p",[s._v("事件循环是指: 执行一个宏任务，然后执行清空微任务列表，循环再执行宏任务，再清微任务列表")]),s._v(" "),n("ul",[n("li",[s._v("微任务 "),n("code",[s._v("microtask(jobs)")]),s._v(": "),n("code",[s._v("promise / ajax / Object.observe(该方法已废弃)")])]),s._v(" "),n("li",[s._v("宏任务 "),n("code",[s._v("macrotask(task)")]),s._v(": "),n("code",[s._v("setTimout / script / IO / UI Rendering")])])]),s._v(" "),n("h3",{attrs:{id:"_4-从输入-url-到展示的过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-从输入-url-到展示的过程","aria-hidden":"true"}},[s._v("#")]),s._v(" 4. 从输入 url 到展示的过程")]),s._v(" "),n("ul",[n("li",[s._v("DNS 解析")]),s._v(" "),n("li",[s._v("TCP 三次握手")]),s._v(" "),n("li",[s._v("发送请求，分析 url，设置请求报文(头，主体)")]),s._v(" "),n("li",[s._v("服务器返回请求的文件 (html)")]),s._v(" "),n("li",[s._v("浏览器渲染\n"),n("ul",[n("li",[s._v("HTML parser --\x3e DOM Tree\n"),n("ul",[n("li",[s._v("标记化算法，进行元素状态的标记")]),s._v(" "),n("li",[s._v("dom 树构建")])])]),s._v(" "),n("li",[s._v("CSS parser --\x3e Style Tree\n"),n("ul",[n("li",[s._v("解析 css 代码，生成样式树")])])]),s._v(" "),n("li",[s._v("attachment --\x3e Render Tree\n"),n("ul",[n("li",[s._v("结合 dom树 与 style树，生成渲染树")])])]),s._v(" "),n("li",[s._v("layout: 布局")]),s._v(" "),n("li",[s._v("GPU painting: 像素绘制页面")])])])]),s._v(" "),n("h3",{attrs:{id:"_5-重绘与回流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-重绘与回流","aria-hidden":"true"}},[s._v("#")]),s._v(" 5. 重绘与回流")]),s._v(" "),n("p",[s._v("当元素的样式发生变化时，浏览器需要触发更新，重新绘制元素。这个过程中，有两种类型的操作，即重绘与回流。")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("重绘(repaint)")]),s._v(": 当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此 "),n("strong",[s._v("损耗较少")])]),s._v(" "),n("li",[n("strong",[s._v("回流(reflow)")]),s._v(": 当元素的尺寸、结构或触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。会触发回流的操作:\n"),n("ul",[n("li",[s._v("页面初次渲染")]),s._v(" "),n("li",[s._v("浏览器窗口大小改变")]),s._v(" "),n("li",[s._v("元素尺寸、位置、内容发生改变")]),s._v(" "),n("li",[s._v("元素字体大小变化")]),s._v(" "),n("li",[s._v("添加或者删除可见的 dom 元素")]),s._v(" "),n("li",[s._v("激活 CSS 伪类（例如：:hover）")]),s._v(" "),n("li",[s._v("查询某些属性或调用某些方法\n"),n("ul",[n("li",[s._v("clientWidth、clientHeight、clientTop、clientLeft")]),s._v(" "),n("li",[s._v("offsetWidth、offsetHeight、offsetTop、offsetLeft")]),s._v(" "),n("li",[s._v("scrollWidth、scrollHeight、scrollTop、scrollLeft")]),s._v(" "),n("li",[s._v("getComputedStyle()")]),s._v(" "),n("li",[s._v("getBoundingClientRect()")]),s._v(" "),n("li",[s._v("scrollTo()")])])])])])]),s._v(" "),n("p",[n("strong",[s._v("回流必定触发重绘，重绘不一定触发回流。重绘的开销较小，回流的代价较高。")])]),s._v(" "),n("h4",{attrs:{id:"最佳实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践","aria-hidden":"true"}},[s._v("#")]),s._v(" 最佳实践:")]),s._v(" "),n("ul",[n("li",[s._v("css\n"),n("ul",[n("li",[s._v("避免使用"),n("code",[s._v("table")]),s._v("布局")]),s._v(" "),n("li",[s._v("将动画效果应用到"),n("code",[s._v("position")]),s._v("属性为"),n("code",[s._v("absolute")]),s._v("或"),n("code",[s._v("fixed")]),s._v("的元素上")])])]),s._v(" "),n("li",[s._v("javascript\n"),n("ul",[n("li",[s._v("避免频繁操作样式，可汇总后统一 "),n("strong",[s._v("一次修改")])]),s._v(" "),n("li",[s._v("尽量使用"),n("code",[s._v("class")]),s._v("进行样式修改")]),s._v(" "),n("li",[s._v("减少"),n("code",[s._v("dom")]),s._v("的增删次数，可使用 "),n("strong",[s._v("字符串")]),s._v(" 或者 "),n("code",[s._v("documentFragment")]),s._v(" 一次性插入")]),s._v(" "),n("li",[s._v("极限优化时，修改样式可将其"),n("code",[s._v("display: none")]),s._v("后修改")]),s._v(" "),n("li",[s._v("避免多次触发上面提到的那些会触发回流的方法，可以的话尽量用 "),n("strong",[s._v("变量存住")])])])])]),s._v(" "),n("h3",{attrs:{id:"_6-存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-存储","aria-hidden":"true"}},[s._v("#")]),s._v(" 6. 存储")]),s._v(" "),n("p",[s._v("我们经常需要对业务中的一些数据进行存储，通常可以分为 短暂性存储 和 持久性储存。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("短暂性的时候，我们只需要将数据存在内存中，只在运行时可用")])]),s._v(" "),n("li",[n("p",[s._v("持久性存储，可以分为 浏览器端 与 服务器端")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("浏览器:")]),s._v(" "),n("ul",[n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("cookie\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v(": 通常用于存储用户身份，登录状态等")]),s._v(" "),n("ul",[n("li",[s._v("http 中自动携带， 体积上限为 4K， 可自行设置过期时间")])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("localStorage / sessionStorage")]),s._v(": 长久储存/窗口关闭删除， 体积限制为 4~5M")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("indexDB")])])])])]),s._v(" "),n("li",[n("p",[s._v("服务器:")]),s._v(" "),n("ul",[n("li",[s._v("分布式缓存 redis")]),s._v(" "),n("li",[s._v("数据库")])])])])])]),s._v(" "),n("h3",{attrs:{id:"_7-web-worker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-web-worker","aria-hidden":"true"}},[s._v("#")]),s._v(" 7. Web Worker")]),s._v(" "),n("p",[s._v("现代浏览器为"),n("code",[s._v("JavaScript")]),s._v("创造的 "),n("strong",[s._v("多线程环境")]),s._v("。可以新建并将部分任务分配到"),n("code",[s._v("worker")]),s._v("线程并行运行，两个线程可 "),n("strong",[s._v("独立运行，互不干扰")]),s._v("，可通过自带的 "),n("strong",[s._v("消息机制")]),s._v(" 相互通信。")]),s._v(" "),n("p",[n("strong",[s._v("基本用法:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 创建 worker\nconst worker = new Worker('work.js');\n\n// 向主进程推送消息\nworker.postMessage('Hello World');\n\n// 监听主进程来的消息\nworker.onmessage = function (event) {\n  console.log('Received message ' + event.data);\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[n("strong",[s._v("限制:")])]),s._v(" "),n("ul",[n("li",[s._v("同源限制")]),s._v(" "),n("li",[s._v("无法使用 "),n("code",[s._v("document")]),s._v(" / "),n("code",[s._v("window")]),s._v(" / "),n("code",[s._v("alert")]),s._v(" / "),n("code",[s._v("confirm")])]),s._v(" "),n("li",[s._v("无法加载本地资源")])]),s._v(" "),n("h3",{attrs:{id:"_8-v8垃圾回收机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-v8垃圾回收机制","aria-hidden":"true"}},[s._v("#")]),s._v(" 8. V8垃圾回收机制")]),s._v(" "),n("p",[s._v("垃圾回收: 将内存中不再使用的数据进行清理，释放出内存空间。V8 将内存分成 "),n("strong",[s._v("新生代空间")]),s._v(" 和 "),n("strong",[s._v("老生代空间")]),s._v("。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("新生代空间")]),s._v(" "),n("p",[s._v(": 用于存活较短的对象")]),s._v(" "),n("ul",[n("li",[s._v("又分成两个空间: from 空间 与 to 空间")]),s._v(" "),n("li",[s._v("Scavenge GC算法: 当 from 空间被占满时，启动 GC 算法\n"),n("ul",[n("li",[s._v("存活的对象从 from space 转移到 to space")]),s._v(" "),n("li",[s._v("清空 from space")]),s._v(" "),n("li",[s._v("from space 与 to space 互换")]),s._v(" "),n("li",[s._v("完成一次新生代GC")])])])])]),s._v(" "),n("li",[n("p",[s._v("老生代空间")]),s._v(" "),n("p",[s._v(": 用于存活时间较长的对象")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("从 新生代空间 转移到 老生代空间 的条件")]),s._v(" "),n("ul",[n("li",[s._v("经历过一次以上 Scavenge GC 的对象")]),s._v(" "),n("li",[s._v("当 to space 体积超过25%")])])]),s._v(" "),n("li",[n("p",[s._v("标记清除算法")]),s._v(" "),n("p",[s._v(": 标记存活的对象，未被标记的则被释放")]),s._v(" "),n("ul",[n("li",[s._v("增量标记: 小模块标记，在代码执行间隙执，GC 会影响性能")]),s._v(" "),n("li",[s._v("并发标记(最新技术): 不阻塞 js 执行")])])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("压缩算法")]),s._v(": 将内存中清除后导致的碎片化对象往内存堆的一端移动，解决 "),n("strong",[s._v("内存的碎片化")])])])])])]),s._v(" "),n("h3",{attrs:{id:"_9-内存泄露"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-内存泄露","aria-hidden":"true"}},[s._v("#")]),s._v(" 9. 内存泄露")]),s._v(" "),n("ul",[n("li",[s._v("意外的"),n("strong",[s._v("全局变量")]),s._v(": 无法被回收")]),s._v(" "),n("li",[n("strong",[s._v("定时器")]),s._v(": 未被正确关闭，导致所引用的外部变量无法被释放")]),s._v(" "),n("li",[n("strong",[s._v("事件监听")]),s._v(": 没有正确销毁 (低版本浏览器可能出现)")]),s._v(" "),n("li",[n("strong",[s._v("闭包")]),s._v(": 会导致父级中的变量无法被释放")]),s._v(" "),n("li",[n("strong",[s._v("dom 引用")]),s._v(": dom 元素被删除时，内存中的引用未被正确清空")])]),s._v(" "),n("p",[s._v("可用 chrome 中的 timeline 进行内存标记，可视化查看内存的变化情况，找出异常点。")]),s._v(" "),n("h2",{attrs:{id:"服务端与网络"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#服务端与网络","aria-hidden":"true"}},[s._v("#")]),s._v(" 服务端与网络")]),s._v(" "),n("h3",{attrs:{id:"_1-http-https-协议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-https-协议","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. http/https 协议")]),s._v(" "),n("ul",[n("li",[s._v("1.0 协议缺陷:\n"),n("ul",[n("li",[s._v("无法复用链接，完成即断开，"),n("strong",[s._v("重新慢启动和 TCP 3次握手")])]),s._v(" "),n("li",[s._v("head of line blocking: "),n("strong",[s._v("线头阻塞")]),s._v("，导致请求之间互相影响")])])]),s._v(" "),n("li",[s._v("1.1 改进:\n"),n("ul",[n("li",[n("strong",[s._v("长连接")]),s._v("(默认 keep-alive)，复用")]),s._v(" "),n("li",[s._v("host 字段指定对应的虚拟站点")]),s._v(" "),n("li",[s._v("新增功能:\n"),n("ul",[n("li",[s._v("断点续传")]),s._v(" "),n("li",[s._v("身份认证")]),s._v(" "),n("li",[s._v("状态管理")]),s._v(" "),n("li",[s._v("cache 缓存\n"),n("ul",[n("li",[s._v("Cache-Control")]),s._v(" "),n("li",[s._v("Expires")]),s._v(" "),n("li",[s._v("Last-Modified")]),s._v(" "),n("li",[s._v("Etag")])])])])])])]),s._v(" "),n("li",[s._v("2.0:\n"),n("ul",[n("li",[s._v("多路复用")]),s._v(" "),n("li",[s._v("二进制分帧层: 应用层和传输层之间")]),s._v(" "),n("li",[s._v("首部压缩")]),s._v(" "),n("li",[s._v("服务端推送")])])]),s._v(" "),n("li",[s._v("https: 较为安全的网络传输协议\n"),n("ul",[n("li",[s._v("证书(公钥)")]),s._v(" "),n("li",[s._v("SSL 加密")]),s._v(" "),n("li",[s._v("端口 443")])])]),s._v(" "),n("li",[s._v("TCP:\n"),n("ul",[n("li",[s._v("三次握手")]),s._v(" "),n("li",[s._v("四次挥手")]),s._v(" "),n("li",[s._v("滑动窗口: 流量控制")]),s._v(" "),n("li",[s._v("拥塞处理\n"),n("ul",[n("li",[s._v("慢开始")]),s._v(" "),n("li",[s._v("拥塞避免")]),s._v(" "),n("li",[s._v("快速重传")]),s._v(" "),n("li",[s._v("快速恢复")])])])])]),s._v(" "),n("li",[s._v("缓存策略: 可分为 "),n("strong",[s._v("强缓存")]),s._v(" 和 "),n("strong",[s._v("协商缓存")]),s._v(" "),n("ul",[n("li",[s._v("Cache-Control/Expires: 浏览器判断缓存是否过期，未过期时，直接使用强缓存，"),n("strong",[s._v("Cache-Control的 max-age 优先级高于 Expires")])]),s._v(" "),n("li",[s._v("当缓存已经过期时，使用协商缓存\n"),n("ul",[n("li",[s._v("唯一标识方案: Etag(response 携带) & If-None-Match(request携带，上一次返回的 Etag): 服务器判断资源是否被修改，")]),s._v(" "),n("li",[s._v("最后一次修改时间: Last-Modified(response) & If-Modified-Since (request，上一次返回的Last-Modified)\n"),n("ul",[n("li",[s._v("如果一致，则直接返回 304 通知浏览器使用缓存")]),s._v(" "),n("li",[s._v("如不一致，则服务端返回新的资源")])])])])]),s._v(" "),n("li",[s._v("Last-Modified 缺点：\n"),n("ul",[n("li",[s._v("周期性修改，但内容未变时，会导致缓存失效")]),s._v(" "),n("li",[s._v("最小粒度只到 s， s 以内的改动无法检测到")])])]),s._v(" "),n("li",[s._v("Etag 的优先级高于 Last-Modified")])])])]),s._v(" "),n("h3",{attrs:{id:"_2-常见状态码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-常见状态码","aria-hidden":"true"}},[s._v("#")]),s._v(" 2. 常见状态码")]),s._v(" "),n("ul",[n("li",[s._v("1xx: 接受，继续处理")]),s._v(" "),n("li",[s._v("200: 成功，并返回数据")]),s._v(" "),n("li",[s._v("201: 已创建")]),s._v(" "),n("li",[s._v("202: 已接受")]),s._v(" "),n("li",[s._v("203: 成为，但未授权")]),s._v(" "),n("li",[s._v("204: 成功，无内容")]),s._v(" "),n("li",[s._v("205: 成功，重置内容")]),s._v(" "),n("li",[s._v("206: 成功，部分内容")]),s._v(" "),n("li",[s._v("301: 永久移动，重定向")]),s._v(" "),n("li",[s._v("302: 临时移动，可使用原有URI")]),s._v(" "),n("li",[s._v("304: 资源未修改，可使用缓存")]),s._v(" "),n("li",[s._v("305: 需代理访问")]),s._v(" "),n("li",[s._v("400: 请求语法错误")]),s._v(" "),n("li",[s._v("401: 要求身份认证")]),s._v(" "),n("li",[s._v("403: 拒绝请求")]),s._v(" "),n("li",[s._v("404: 资源不存在")]),s._v(" "),n("li",[s._v("500: 服务器错误")])]),s._v(" "),n("h3",{attrs:{id:"_3-get-post"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-get-post","aria-hidden":"true"}},[s._v("#")]),s._v(" 3. get / post")]),s._v(" "),n("ul",[n("li",[s._v("get: 缓存、请求长度受限、会被历史保存记录\n"),n("ul",[n("li",[s._v("无副作用(不修改资源)，幂等(请求次数与资源无关)的场景")])])]),s._v(" "),n("li",[s._v("post: 安全、大数据、更多编码类型")])]),s._v(" "),n("p",[s._v("两者详细对比如下图:")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/14/168e9d9050b9d08a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),s._v(" "),n("h3",{attrs:{id:"_4-websocket"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-websocket","aria-hidden":"true"}},[s._v("#")]),s._v(" 4. Websocket")]),s._v(" "),n("p",[s._v("Websocket 是一个 "),n("strong",[s._v("持久化的协议")]),s._v("， 基于 http ， 服务端可以 "),n("strong",[s._v("主动 push")])]),s._v(" "),n("ul",[n("li",[s._v("兼容：\n"),n("ul",[n("li",[s._v("FLASH Socket")]),s._v(" "),n("li",[s._v("长轮询： 定时发送 ajax")]),s._v(" "),n("li",[s._v("long poll： 发送 --\x3e 有消息时再 response")])])]),s._v(" "),n("li",[n("code",[s._v("new WebSocket(url)")])]),s._v(" "),n("li",[n("code",[s._v("ws.onerror = fn")])]),s._v(" "),n("li",[n("code",[s._v("ws.onclose = fn")])]),s._v(" "),n("li",[n("code",[s._v("ws.onopen = fn")])]),s._v(" "),n("li",[n("code",[s._v("ws.onmessage = fn")])]),s._v(" "),n("li",[n("code",[s._v("ws.send()")])])]),s._v(" "),n("h3",{attrs:{id:"_5-tcp三次握手"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-tcp三次握手","aria-hidden":"true"}},[s._v("#")]),s._v(" 5. TCP三次握手")]),s._v(" "),n("p",[s._v("建立连接前，客户端和服务端需要通过握手来确认对方:")]),s._v(" "),n("ul",[n("li",[s._v("客户端发送 syn(同步序列编号) 请求，进入 syn_send 状态，等待确认")]),s._v(" "),n("li",[s._v("服务端接收并确认 syn 包后发送 syn+ack 包，进入 syn_recv 状态")]),s._v(" "),n("li",[s._v("客户端接收 syn+ack 包后，发送 ack 包，双方进入 established 状态")])]),s._v(" "),n("h3",{attrs:{id:"_6-tcp四次挥手"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-tcp四次挥手","aria-hidden":"true"}},[s._v("#")]),s._v(" 6. TCP四次挥手")]),s._v(" "),n("ul",[n("li",[s._v("客户端 -- FIN --\x3e 服务端， FIN—WAIT")]),s._v(" "),n("li",[s._v("服务端 -- ACK --\x3e 客户端， CLOSE-WAIT")]),s._v(" "),n("li",[s._v("服务端 -- ACK,FIN --\x3e 客户端， LAST-ACK")]),s._v(" "),n("li",[s._v("客户端 -- ACK --\x3e 服务端，CLOSED")])]),s._v(" "),n("h3",{attrs:{id:"_7-node-的-event-loop-6个阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-node-的-event-loop-6个阶段","aria-hidden":"true"}},[s._v("#")]),s._v(" 7. Node 的 Event Loop: 6个阶段")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("timer 阶段: 执行到期的"),n("code",[s._v("setTimeout / setInterval")]),s._v("队列回调")])]),s._v(" "),n("li",[n("p",[s._v("I/O 阶段: 执行上轮循环残流的"),n("code",[s._v("callback")])])]),s._v(" "),n("li",[n("p",[s._v("idle, prepare")])]),s._v(" "),n("li",[n("p",[s._v("poll: 等待回调")]),s._v(" "),n("ul",[n("li",[n("ol",[n("li",[s._v("执行回调")])])]),s._v(" "),n("li",[n("ol",[n("li",[s._v("执行定时器")])]),s._v(" "),n("ul",[n("li",[s._v("如有到期的"),n("code",[s._v("setTimeout / setInterval")]),s._v("， 则返回 timer 阶段")]),s._v(" "),n("li",[s._v("如有"),n("code",[s._v("setImmediate")]),s._v("，则前往 check 阶段")])])])])]),s._v(" "),n("li",[n("p",[s._v("check")]),s._v(" "),n("ul",[n("li",[s._v("执行"),n("code",[s._v("setImmediate")])])])]),s._v(" "),n("li",[n("p",[s._v("close callbacks")])])]),s._v(" "),n("h3",{attrs:{id:"跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨域","aria-hidden":"true"}},[s._v("#")]),s._v(" 跨域")]),s._v(" "),n("ul",[n("li",[s._v("JSONP: 利用"),n("code",[s._v("<script>")]),s._v("标签不受跨域限制的特点，缺点是只能支持 get 请求")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function jsonp(url, jsonpCallback, success) {\n  const script = document.createElement('script')\n  script.src = url\n  script.async = true\n  script.type = 'text/javascript'\n  window[jsonpCallback] = function(data) {\n    success && success(data)\n  }\n  document.body.appendChild(script)\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("设置 CORS: Access-Control-Allow-Origin：*")]),s._v(" "),n("li",[s._v("postMessage")])]),s._v(" "),n("h3",{attrs:{id:"安全"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安全","aria-hidden":"true"}},[s._v("#")]),s._v(" 安全")]),s._v(" "),n("ul",[n("li",[s._v("XSS攻击: 注入恶意代码\n"),n("ul",[n("li",[s._v("cookie 设置 httpOnly")]),s._v(" "),n("li",[s._v("转义页面上的输入内容和输出内容")])])]),s._v(" "),n("li",[s._v("CSRF: 跨站请求伪造，防护:\n"),n("ul",[n("li",[s._v("get 不修改数据")]),s._v(" "),n("li",[s._v("不被第三方网站访问到用户的 cookie")]),s._v(" "),n("li",[s._v("设置白名单，不被第三方网站请求")]),s._v(" "),n("li",[s._v("请求校验")])])])]),s._v(" "),n("h2",{attrs:{id:"框架：vue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#框架：vue","aria-hidden":"true"}},[s._v("#")]),s._v(" 框架：Vue")]),s._v(" "),n("h3",{attrs:{id:"_1-nexttick"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-nexttick","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. nextTick")]),s._v(" "),n("p",[s._v("在下次"),n("code",[s._v("dom")]),s._v("更新循环结束之后执行延迟回调，可用于获取更新后的"),n("code",[s._v("dom")]),s._v("状态")]),s._v(" "),n("ul",[n("li",[s._v("新版本中默认是"),n("code",[s._v("mincrotasks")]),s._v(", "),n("code",[s._v("v-on")]),s._v("中会使用"),n("code",[s._v("macrotasks")])]),s._v(" "),n("li",[n("code",[s._v("macrotasks")]),s._v("任务的实现:\n"),n("ul",[n("li",[n("code",[s._v("setImmediate / MessageChannel / setTimeout")])])])])]),s._v(" "),n("h3",{attrs:{id:"_2-生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-生命周期","aria-hidden":"true"}},[s._v("#")]),s._v(" 2. 生命周期")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("_init_")])]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("initLifecycle/Event")]),s._v("，往"),n("code",[s._v("vm")]),s._v("上挂载各种属性")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("callHook: beforeCreated")]),s._v(": 实例刚创建")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("initInjection/initState")]),s._v(": 初始化注入和 data 响应性")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("created")]),s._v(": 创建完成，属性已经绑定， 但还未生成真实"),n("code",[s._v("dom")])])]),s._v(" "),n("li",[n("p",[s._v("进行元素的挂载： "),n("code",[s._v("$el / vm.$mount()")])])]),s._v(" "),n("li",[n("p",[s._v("是否有")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("template\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v(": 解析成")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("render function\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("*.vue")]),s._v("文件: "),n("code",[s._v("vue-loader")]),s._v("会将"),n("code",[s._v("<template>")]),s._v("编译成"),n("code",[s._v("render function")])])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("beforeMount")]),s._v(": 模板编译/挂载之前")])]),s._v(" "),n("li",[n("p",[s._v("执行"),n("code",[s._v("render function")]),s._v("，生成真实的"),n("code",[s._v("dom")]),s._v("，并替换到"),n("code",[s._v("dom tree")]),s._v("中")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("mounted")]),s._v(": 组件已挂载")])])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("update")]),s._v(":")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("执行"),n("code",[s._v("diff")]),s._v("算法，比对改变是否需要触发UI更新")])]),s._v(" "),n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("flushScheduleQueue\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("watcher.before")]),s._v(": 触发"),n("code",[s._v("beforeUpdate")]),s._v("钩子\t\t- "),n("code",[s._v("watcher.run()")]),s._v(": 执行"),n("code",[s._v("watcher")]),s._v("中的 "),n("code",[s._v("notify")]),s._v("，通知所有依赖项更新UI")])])]),s._v(" "),n("li",[n("p",[s._v("触发"),n("code",[s._v("updated")]),s._v("钩子: 组件已更新")])])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("actived / deactivated(keep-alive)")]),s._v(": 不销毁，缓存，组件激活与失活")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("destroy")]),s._v(":")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("beforeDestroy")]),s._v(": 销毁开始")]),s._v(" "),n("li",[s._v("销毁自身且递归销毁子组件以及事件监听\n"),n("ul",[n("li",[n("code",[s._v("remove()")]),s._v(": 删除节点")]),s._v(" "),n("li",[n("code",[s._v("watcher.teardown()")]),s._v(": 清空依赖")]),s._v(" "),n("li",[n("code",[s._v("vm.$off()")]),s._v(": 解绑监听")])])]),s._v(" "),n("li",[n("code",[s._v("destroyed")]),s._v(": 完成后触发钩子")])])])]),s._v(" "),n("p",[s._v("上面是"),n("code",[s._v("vue")]),s._v("的声明周期的简单梳理，接下来我们直接以代码的形式来完成"),n("code",[s._v("vue")]),s._v("的初始化")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Vue({})\n\n// 初始化Vue实例\nfunction _init() {\n\t // 挂载属性\n    initLifeCycle(vm) \n    // 初始化事件系统，钩子函数等\n    initEvent(vm) \n    // 编译slot、vnode\n    initRender(vm) \n    // 触发钩子\n    callHook(vm, 'beforeCreate')\n    // 添加inject功能\n    initInjection(vm)\n    // 完成数据响应性 props/data/watch/computed/methods\n    initState(vm)\n    // 添加 provide 功能\n    initProvide(vm)\n    // 触发钩子\n    callHook(vm, 'created')\n\t\t\n\t // 挂载节点\n    if (vm.$options.el) {\n        vm.$mount(vm.$options.el)\n    }\n}\n\n// 挂载节点实现\nfunction mountComponent(vm) {\n\t // 获取 render function\n    if (!this.options.render) {\n        // template to render\n        // Vue.compile = compileToFunctions\n        let { render } = compileToFunctions() \n        this.options.render = render\n    }\n    // 触发钩子\n    callHook('beforeMounte')\n    // 初始化观察者\n    // render 渲染 vdom， \n    vdom = vm.render()\n    // update: 根据 diff 出的 patchs 挂载成真实的 dom \n    vm._update(vdom)\n    // 触发钩子  \n    callHook(vm, 'mounted')\n}\n\n// 更新节点实现\nfuntion queueWatcher(watcher) {\n\tnextTick(flushScheduleQueue)\n}\n\n// 清空队列\nfunction flushScheduleQueue() {\n\t // 遍历队列中所有修改\n    for(){\n\t    // beforeUpdate\n        watcher.before()\n         \n        // 依赖局部更新节点\n        watcher.update() \n        callHook('updated')\n    }\n}\n\n// 销毁实例实现\nVue.prototype.$destory = function() {\n\t // 触发钩子\n    callHook(vm, 'beforeDestory')\n    // 自身及子节点\n    remove() \n    // 删除依赖\n    watcher.teardown() \n    // 删除监听\n    vm.$off() \n    // 触发钩子\n    callHook(vm, 'destoryed')\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br")])]),n("h3",{attrs:{id:"_3-数据响应-数据劫持"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据响应-数据劫持","aria-hidden":"true"}},[s._v("#")]),s._v(" 3. 数据响应(数据劫持)")]),s._v(" "),n("p",[s._v("看完生命周期后，里面的"),n("code",[s._v("watcher")]),s._v("等内容其实是数据响应中的一部分。数据响应的实现由两部分构成: "),n("strong",[s._v("观察者( watcher )")]),s._v(" 和 "),n("strong",[s._v("依赖收集器( Dep )")]),s._v("，其核心是 "),n("code",[s._v("defineProperty")]),s._v("这个方法，它可以 "),n("strong",[s._v("重写属性的 get 与 set")]),s._v(" 方法，从而完成监听数据的改变。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Observe (观察者)观察 props 与 state")]),s._v(" "),n("ul",[n("li",[s._v("遍历 props 与 state，对每个属性创建独立的监听器( watcher )")])])]),s._v(" "),n("li",[n("p",[s._v("使用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("defineProperty\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("重写每个属性的 get/set(")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("defineReactive\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("）")]),s._v(" "),n("ul",[n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("get\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v(": 收集依赖")]),s._v(" "),n("ul",[n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Dep.depend()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("watcher.addDep()")])])])])])]),s._v(" "),n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("set\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v(": 派发更新")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("Dep.notify()")])]),s._v(" "),n("li",[n("code",[s._v("watcher.update()")])]),s._v(" "),n("li",[n("code",[s._v("queenWatcher()")])]),s._v(" "),n("li",[n("code",[s._v("nextTick")])]),s._v(" "),n("li",[n("code",[s._v("flushScheduleQueue")])]),s._v(" "),n("li",[n("code",[s._v("watcher.run()")])]),s._v(" "),n("li",[n("code",[s._v("updateComponent()")])])])])])])]),s._v(" "),n("p",[s._v("大家可以先看下面的数据相应的代码实现后，理解后就比较容易看懂上面的简单脉络了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let data = {a: 1}\n// 数据响应性\nobserve(data)\n\n// 初始化观察者\nnew Watcher(data, 'name', updateComponent)\ndata.a = 2\n\n// 简单表示用于数据更新后的操作\nfunction updateComponent() {\n    vm._update() // patchs\n}\n\n// 监视对象\nfunction observe(obj) {\n\t // 遍历对象，使用 get/set 重新定义对象的每个属性值\n    Object.keys(obj).map(key => {\n        defineReactive(obj, key, obj[key])\n    })\n}\n\nfunction defineReactive(obj, k, v) {\n    // 递归子属性\n    if (type(v) == 'object') observe(v)\n    \n    // 新建依赖收集器\n    let dep = new Dep()\n    // 定义get/set\n    Object.defineProperty(obj, k, {\n        enumerable: true,\n        configurable: true,\n        get: function reactiveGetter() {\n        \t  // 当有获取该属性时，证明依赖于该对象，因此被添加进收集器中\n            if (Dep.target) {\n                dep.addSub(Dep.target)\n            }\n            return v\n        },\n        // 重新设置值时，触发收集器的通知机制\n        set: function reactiveSetter(nV) {\n            v = nV\n            dep.nofify()\n        },\n    })\n}\n\n// 依赖收集器\nclass Dep {\n    constructor() {\n        this.subs = []\n    }\n    addSub(sub) {\n        this.subs.push(sub)\n    }\n    notify() {\n        this.subs.map(sub => {\n            sub.update()\n        })\n    }\n}\n\nDep.target = null\n\n// 观察者\nclass Watcher {\n    constructor(obj, key, cb) {\n        Dep.target = this\n        this.cb = cb\n        this.obj = obj\n        this.key = key\n        this.value = obj[key]\n        Dep.target = null\n    }\n    addDep(Dep) {\n        Dep.addSub(this)\n    }\n    update() {\n        this.value = this.obj[this.key]\n        this.cb(this.value)\n    }\n    before() {\n        callHook('beforeUpdate')\n    }\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br")])]),n("h3",{attrs:{id:"_4-virtual-dom-原理实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-virtual-dom-原理实现","aria-hidden":"true"}},[s._v("#")]),s._v(" 4. virtual dom 原理实现")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("创建 dom 树")])]),s._v(" "),n("li",[n("p",[s._v("树的"),n("code",[s._v("diff")]),s._v("，同层对比，输出"),n("code",[s._v("patchs(listDiff/diffChildren/diffProps)")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("没有新的节点，返回")])]),s._v(" "),n("li",[n("p",[s._v("新的节点")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("tagName\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("与")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("key\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("不变， 对比")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("props\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("，继续递归遍历子树")]),s._v(" "),n("ul",[n("li",[s._v("对比属性(对比新旧属性列表):\n"),n("ul",[n("li",[s._v("旧属性是否存在与新属性列表中")]),s._v(" "),n("li",[s._v("都存在的是否有变化")]),s._v(" "),n("li",[s._v("是否出现旧列表中没有的新属性")])])])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("tagName")]),s._v("和"),n("code",[s._v("key")]),s._v("值变化了，则直接替换成新节点")])])])]),s._v(" "),n("li",[n("p",[s._v("渲染差异")]),s._v(" "),n("ul",[n("li",[s._v("遍历"),n("code",[s._v("patchs")]),s._v("， 把需要更改的节点取出来")]),s._v(" "),n("li",[s._v("局部更新"),n("code",[s._v("dom")])])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// diff算法的实现\nfunction diff(oldTree, newTree) {\n\t // 差异收集\n    let pathchs = {}\n    dfs(oldTree, newTree, 0, pathchs)\n    return pathchs\n}\n\nfunction dfs(oldNode, newNode, index, pathchs) {\n    let curPathchs = []\n    if (newNode) {\n        // 当新旧节点的 tagName 和 key 值完全一致时\n        if (oldNode.tagName === newNode.tagName && oldNode.key === newNode.key) {\n        \t  // 继续比对属性差异\n            let props = diffProps(oldNode.props, newNode.props)\n            curPathchs.push({ type: 'changeProps', props })\n            // 递归进入下一层级的比较\n            diffChildrens(oldNode.children, newNode.children, index, pathchs)\n        } else {\n        \t  // 当 tagName 或者 key 修改了后，表示已经是全新节点，无需再比\n            curPathchs.push({ type: 'replaceNode', node: newNode })\n        }\n    }\n\n\t // 构建出整颗差异树\n    if (curPathchs.length) {\n    \t\tif(pathchs[index]){\n    \t\t\tpathchs[index] = pathchs[index].concat(curPathchs)\n    \t\t} else {\n    \t\t\tpathchs[index] = curPathchs\n    \t\t}\n    }\n}\n\n// 属性对比实现\nfunction diffProps(oldProps, newProps) {\n    let propsPathchs = []\n    // 遍历新旧属性列表\n    // 查找删除项\n    // 查找修改项\n    // 查找新增项\n    forin(olaProps, (k, v) => {\n        if (!newProps.hasOwnProperty(k)) {\n            propsPathchs.push({ type: 'remove', prop: k })\n        } else {\n            if (v !== newProps[k]) {\n                propsPathchs.push({ type: 'change', prop: k , value: newProps[k] })\n            }\n        }\n    })\n    forin(newProps, (k, v) => {\n        if (!oldProps.hasOwnProperty(k)) {\n            propsPathchs.push({ type: 'add', prop: k, value: v })\n        }\n    })\n    return propsPathchs\n}\n\n// 对比子级差异\nfunction diffChildrens(oldChild, newChild, index, pathchs) {\n\t\t// 标记子级的删除/新增/移动\n    let { change, list } = diffList(oldChild, newChild, index, pathchs)\n    if (change.length) {\n        if (pathchs[index]) {\n            pathchs[index] = pathchs[index].concat(change)\n        } else {\n            pathchs[index] = change\n        }\n    }\n\n\t // 根据 key 获取原本匹配的节点，进一步递归从头开始对比\n    oldChild.map((item, i) => {\n        let keyIndex = list.indexOf(item.key)\n        if (keyIndex) {\n            let node = newChild[keyIndex]\n            // 进一步递归对比\n            dfs(item, node, index, pathchs)\n        }\n    })\n}\n\n// 列表对比，主要也是根据 key 值查找匹配项\n// 对比出新旧列表的新增/删除/移动\nfunction diffList(oldList, newList, index, pathchs) {\n    let change = []\n    let list = []\n    const newKeys = getKey(newList)\n    oldList.map(v => {\n        if (newKeys.indexOf(v.key) > -1) {\n            list.push(v.key)\n        } else {\n            list.push(null)\n        }\n    })\n\n    // 标记删除\n    for (let i = list.length - 1; i>= 0; i--) {\n        if (!list[i]) {\n            list.splice(i, 1)\n            change.push({ type: 'remove', index: i })\n        }\n    }\n\n    // 标记新增和移动\n    newList.map((item, i) => {\n        const key = item.key\n        const index = list.indexOf(key)\n        if (index === -1 || key == null) {\n            // 新增\n            change.push({ type: 'add', node: item, index: i })\n            list.splice(i, 0, key)\n        } else {\n            // 移动\n            if (index !== i) {\n                change.push({\n                    type: 'move',\n                    form: index,\n                    to: i,\n                })\n                move(list, index, i)\n            }\n        }\n    })\n\n    return { change, list }\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br"),n("span",{staticClass:"line-number"},[s._v("119")]),n("br"),n("span",{staticClass:"line-number"},[s._v("120")]),n("br"),n("span",{staticClass:"line-number"},[s._v("121")]),n("br"),n("span",{staticClass:"line-number"},[s._v("122")]),n("br"),n("span",{staticClass:"line-number"},[s._v("123")]),n("br"),n("span",{staticClass:"line-number"},[s._v("124")]),n("br"),n("span",{staticClass:"line-number"},[s._v("125")]),n("br"),n("span",{staticClass:"line-number"},[s._v("126")]),n("br"),n("span",{staticClass:"line-number"},[s._v("127")]),n("br")])]),n("h3",{attrs:{id:"_5-proxy-相比于-defineproperty-的优势"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-proxy-相比于-defineproperty-的优势","aria-hidden":"true"}},[s._v("#")]),s._v(" 5. Proxy 相比于 defineProperty 的优势")]),s._v(" "),n("ul",[n("li",[s._v("数组变化也能监听到")]),s._v(" "),n("li",[s._v("不需要深度遍历监听")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let data = { a: 1 }\nlet reactiveData = new Proxy(data, {\n\tget: function(target, name){\n\t\t// ...\n\t},\n\t// ...\n})\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"_6-vue-router"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue-router","aria-hidden":"true"}},[s._v("#")]),s._v(" 6. vue-router")]),s._v(" "),n("ul",[n("li",[n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("mode\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("hash")])]),s._v(" "),n("li",[n("code",[s._v("history")])])])]),s._v(" "),n("li",[n("p",[s._v("跳转")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("this.$router.push()")])]),s._v(" "),n("li",[n("code",[s._v('<router-link to=""></router-link>')])])])]),s._v(" "),n("li",[n("p",[s._v("占位")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("<router-view></router-view>")])])])])]),s._v(" "),n("h3",{attrs:{id:"_7-vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-vuex","aria-hidden":"true"}},[s._v("#")]),s._v(" 7. vuex")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("state")]),s._v(": 状态中心")]),s._v(" "),n("li",[n("code",[s._v("mutations")]),s._v(": 更改状态")]),s._v(" "),n("li",[n("code",[s._v("actions")]),s._v(": 异步更改状态")]),s._v(" "),n("li",[n("code",[s._v("getters")]),s._v(": 获取状态")]),s._v(" "),n("li",[n("code",[s._v("modules")]),s._v(": 将"),n("code",[s._v("state")]),s._v("分成多个"),n("code",[s._v("modules")]),s._v("，便于管理")])]),s._v(" "),n("h2",{attrs:{id:"算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 算法")]),s._v(" "),n("p",[s._v("其实算法方面在前端的实际项目中涉及得并不多，但还是需要精通一些基础性的算法，一些公司还是会有这方面的需求和考核，建议大家还是需要稍微准备下，这属于加分题。")]),s._v(" "),n("h3",{attrs:{id:"_1-五大算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-五大算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. 五大算法")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("贪心算法")]),s._v(": 局部最优解法")]),s._v(" "),n("li",[n("strong",[s._v("分治算法")]),s._v(": 分成多个小模块，与原问题性质相同")]),s._v(" "),n("li",[n("strong",[s._v("动态规划")]),s._v(": 每个状态都是过去历史的一个总结")]),s._v(" "),n("li",[n("strong",[s._v("回溯法")]),s._v(": 发现原先选择不优时，退回重新选择")]),s._v(" "),n("li",[n("strong",[s._v("分支限界法")])])]),s._v(" "),n("h3",{attrs:{id:"_2-基础排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-基础排序算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 2. 基础排序算法")]),s._v(" "),n("ul",[n("li",[s._v("冒泡排序: 两两比较")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\tfunction bubleSort(arr) {\n\t    var len = arr.length;\n\t    for (let outer = len ; outer >= 2; outer--) {\n\t        for(let inner = 0; inner <=outer - 1; inner++) {\n\t            if(arr[inner] > arr[inner + 1]) {\n\t                [arr[inner],arr[inner+1]] = [arr[inner+1],arr[inner]]\n\t            }\n\t        }\n\t    }\n\t    return arr;\n\t}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[s._v("选择排序: 遍历自身以后的元素，最小的元素跟自己调换位置")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function selectSort(arr) {\n    var len = arr.length;\n    for(let i = 0 ;i < len - 1; i++) {\n        for(let j = i ; j<len; j++) {\n            if(arr[j] < arr[i]) {\n                [arr[i],arr[j]] = [arr[j],arr[i]];\n            }\n        }\n    }\n    return arr\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[s._v("插入排序: 即将元素插入到已排序好的数组中")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function insertSort(arr) {\n    for(let i = 1; i < arr.length; i++) {  //外循环从1开始，默认arr[0]是有序段\n        for(let j = i; j > 0; j--) {  //j = i,将arr[j]依次插入有序段中\n            if(arr[j] < arr[j-1]) {\n                [arr[j],arr[j-1]] = [arr[j-1],arr[j]];\n            } else {\n                break;\n            }\n        }\n    }\n    return arr;\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"_3-高级排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-高级排序算法","aria-hidden":"true"}},[s._v("#")]),s._v(" 3. 高级排序算法")]),s._v(" "),n("ul",[n("li",[s._v("快速排序\n"),n("ul",[n("li",[s._v("选择基准值(base)，原数组长度减一(基准值)，使用 splice")]),s._v(" "),n("li",[s._v("循环原数组，小的放左边(left数组)，大的放右边(right数组);")]),s._v(" "),n("li",[s._v("concat(left, base, right)")]),s._v(" "),n("li",[s._v("递归继续排序 left 与 right")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function quickSort(arr) {\n    if(arr.length <= 1) {\n        return arr;  //递归出口\n    }\n    var left = [],\n        right = [],\n        current = arr.splice(0,1); \n    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] < current) {\n            left.push(arr[i])  //放在左边\n        } else {\n            right.push(arr[i]) //放在右边\n        }\n    }\n    return quickSort(left).concat(current,quickSort(right));\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("ul",[n("li",[s._v("希尔排序：不定步数的插入排序，插入排序")]),s._v(" "),n("li",[s._v("口诀: 插冒归基稳定，快选堆希不稳定")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/14/168e9d8524a2b947?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),s._v(" "),n("p",[s._v("稳定性： 同大小情况下是否可能会被交换位置, 虚拟dom的diff，不稳定性会导致重新渲染；")]),s._v(" "),n("h3",{attrs:{id:"_4-递归运用-斐波那契数列-：-爬楼梯问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-递归运用-斐波那契数列-：-爬楼梯问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 4. 递归运用(斐波那契数列)： 爬楼梯问题")]),s._v(" "),n("p",[s._v("初始在第一级，到第一级有1种方法(s(1) = 1)，到第二级也只有一种方法(s(2) = 1)， 第三级(s(3) = s(1) + s(2))")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function cStairs(n) {\n    if(n === 1 || n === 2) {\n        return 1;\n    } else {\n        return cStairs(n-1) + cStairs(n-2)\n    }\n}\n复制代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"_5-数据树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据树","aria-hidden":"true"}},[s._v("#")]),s._v(" 5. 数据树")]),s._v(" "),n("ul",[n("li",[s._v("二叉树: 最多只有两个子节点\n"),n("ul",[n("li",[s._v("完全二叉树")]),s._v(" "),n("li",[s._v("满二叉树\n"),n("ul",[n("li",[s._v("深度为 h, 有 n 个节点，且满足 n = 2^h - 1")])])])])]),s._v(" "),n("li",[s._v("二叉查找树: 是一种特殊的二叉树，能有效地提高查找效率\n"),n("ul",[n("li",[s._v("小值在左，大值在右")]),s._v(" "),n("li",[s._v("节点 n 的所有左子树值小于 n，所有右子树值大于 n")])])])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/14/168e9d89406fa6a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),s._v(" "),n("ul",[n("li",[s._v("遍历节点\n"),n("ul",[n("li",[s._v("前序遍历\n"),n("ul",[n("li",[n("ol",[n("li",[s._v("根节点")])])]),s._v(" "),n("li",[n("ol",[n("li",[s._v("访问左子节点，回到 1")])])]),s._v(" "),n("li",[n("ol",[n("li",[s._v("访问右子节点，回到 1")])])])])]),s._v(" "),n("li",[s._v("中序遍历\n"),n("ul",[n("li",[n("ol",[n("li",[s._v("先访问到最左的子节点")])])]),s._v(" "),n("li",[n("ol",[n("li",[s._v("访问该节点的父节点")])])]),s._v(" "),n("li",[n("ol",[n("li",[s._v("访问该父节点的右子节点， 回到 1")])])])])]),s._v(" "),n("li",[s._v("后序遍历\n"),n("ul",[n("li",[n("ol",[n("li",[s._v("先访问到最左的子节点")])])]),s._v(" "),n("li",[n("ol",[n("li",[s._v("访问相邻的右节点")])])]),s._v(" "),n("li",[n("ol",[n("li",[s._v("访问父节点， 回到 1")])])])])])])]),s._v(" "),n("li",[s._v("插入与删除节点")])]),s._v(" "),n("h3",{attrs:{id:"_6-天平找次品"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-天平找次品","aria-hidden":"true"}},[s._v("#")]),s._v(" 6. 天平找次品")]),s._v(" "),n("p",[s._v("有n个硬币，其中1个为假币，假币重量较轻，你有一把天平，请问，至少需要称多少次能保证一定找到假币?")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("三等分算法:")]),s._v(" "),n("ul",[n("li",[n("ol",[n("li",[s._v("将硬币分成3组，随便取其中两组天平称量")])]),s._v(" "),n("ul",[n("li",[s._v("平衡，假币在未上称的一组，取其回到 1 继续循环")]),s._v(" "),n("li",[s._v("不平衡，假币在天平上较轻的一组， 取其回到 1 继续循环")])])])])])]),s._v(" "),n("h2",{attrs:{id:"结语"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结语","aria-hidden":"true"}},[s._v("#")]),s._v(" 结语")]),s._v(" "),n("p",[s._v("由于精力时间及篇幅有限，这篇就先写到这。大家慢慢来不急。。🤪。下篇打算准备以下内容，我也得补补课先:")]),s._v(" "),n("ul",[n("li",[s._v("Webpack相关\n"),n("ul",[n("li",[s._v("原理")]),s._v(" "),n("li",[s._v("Loader")]),s._v(" "),n("li",[s._v("Plugin")])])]),s._v(" "),n("li",[s._v("项目性能优化\n"),n("ul",[n("li",[s._v("首屏渲染优化")]),s._v(" "),n("li",[s._v("用户体验优化")]),s._v(" "),n("li",[s._v("webpack 性能优化")])])]),s._v(" "),n("li",[s._v("Hybrid 与 Webview\n"),n("ul",[n("li",[s._v("webview 加载过程")]),s._v(" "),n("li",[s._v("bridge 原理")]),s._v(" "),n("li",[s._v("hybrid app 经验")])])]),s._v(" "),n("li",[s._v("框架: React")])]),s._v(" "),n("p",[s._v("在面试中，很多领域并没有真正的答案，能回答到什么样的深度，还是得靠自己真正的去使用和研究。知识面的广度与深度应该并行，尽量的拓张自己的领域，至少都有些基础性的了解，在被问到的时候可以同面试官唠嗑两句，然后在自己喜欢的领域，又有着足够深入的研究，让面试官觉得你是这方面的专家。")]),s._v(" "),n("p",[s._v("知识大纲还在不断的完善和修正，由于也是精力时间有限，我会慢慢补充后面列出来的部分。当然，我也是在整理中不断的学习，也希望大家能一起参与进来，要补充或修正的地方麻烦赶紧提出。另外，刚新建了个公众号，想作为大家交流和分享的地方，有兴趣想法的童鞋联系我哈~~😉")]),s._v(" "),n("p",[s._v("作者：郭东东")]),s._v(" "),n("p",[s._v("链接：https://juejin.im/post/5c64d15d6fb9a049d37f9c20")])])},[],!1,null,null,null);e.default=t.exports}}]);