(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{82:function(e,t,a){"use strict";a.r(t);var s=a(3),r=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"回滚错误的修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回滚错误的修改","aria-hidden":"true"}},[e._v("#")]),e._v(" 回滚错误的修改")]),e._v(" "),a("blockquote",[a("p",[e._v("BY 童仲毅（"),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("geeeeeeeeek@github"),a("OutboundLink")],1),e._v("）")]),e._v(" "),a("p",[e._v("这是一篇在"),a("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/undoing-changes",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文（BY atlassian）"),a("OutboundLink")],1),e._v("基础上演绎的译文。除非另行注明，页面上所有内容采用知识共享-署名（"),a("a",{attrs:{href:"http://creativecommons.org/licenses/by/2.5/au/deed.zh",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC BY 2.5 AU"),a("OutboundLink")],1),e._v("）协议共享。")])]),e._v(" "),a("p",[e._v("这章教程提供了和项目旧版本打交道所需要的所有技巧。首先，你会知道如何浏览旧的提交，然后了解回滚项目历史中的公有提交和回滚本地机器上的私有更改之间的区别。")]),e._v(" "),a("h2",{attrs:{id:"git-checkout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout","aria-hidden":"true"}},[e._v("#")]),e._v(" git checkout")]),e._v(" "),a("p",[e._v("见上一章"),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/wiki/2.5-%E6%A3%80%E5%87%BA%E4%B9%8B%E5%89%8D%E7%9A%84%E6%8F%90%E4%BA%A4",target:"_blank",rel:"noopener noreferrer"}},[e._v("「2.5 检出之前的提交」"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"git-revert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-revert","aria-hidden":"true"}},[e._v("#")]),e._v(" git revert")]),e._v(" "),a("p",[a("code",[e._v("git revert")]),e._v(" 命令用来撤销一个已经提交的快照。但是，它是通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的 "),a("em",[e._v("新")]),e._v(" 提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wac-cdn.atlassian.com/dam/jcr:b6fcf82b-5b15-4569-8f4f-a76454f9ca5b/03%20(7).svg",alt:"Git Tutorial: git revert"}})]),e._v(" "),a("h3",{attrs:{id:"用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法","aria-hidden":"true"}},[e._v("#")]),e._v(" 用法")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git revert <commit>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("生成一个撤消了 "),a("code",[e._v("<commit>")]),e._v(" 引入的修改的新提交，然后应用到当前分支。")]),e._v(" "),a("h3",{attrs:{id:"讨论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讨论","aria-hidden":"true"}},[e._v("#")]),e._v(" 讨论")]),e._v(" "),a("p",[e._v("撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 "),a("code",[e._v("git revert")]),e._v("，它帮你做了所有的事情。")]),e._v(" "),a("h4",{attrs:{id:"撤销（revert）和重设（reset）对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销（revert）和重设（reset）对比","aria-hidden":"true"}},[e._v("#")]),e._v(" 撤销（revert）和重设（reset）对比")]),e._v(" "),a("p",[e._v("理解这一点很重要。"),a("code",[e._v("git revert")]),e._v(" 回滚了「单独一个提交」，它没有移除后面的提交，然后回到项目之前的状态。在 Git 中，后者实际上被称为 "),a("code",[e._v("reset")]),e._v("，而不是 "),a("code",[e._v("revert")]),e._v("。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wac-cdn.atlassian.com/dam/jcr:a6a50d78-48e3-4765-8492-9e48dec8fd2f/04%20(2).svg",alt:"Git Tutorial: Revert vs Reset"}})]),e._v(" "),a("p",[e._v("撤销和重设相比有两个重要的优点。首先，它不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。至于为什么改变共享的历史是危险\b的，请参阅 "),a("code",[e._v("git reset")]),e._v(" 一节。")]),e._v(" "),a("p",[e._v("其次，"),a("code",[e._v("git revert")]),e._v(" 可以针对历史中任何一个提交，而 "),a("code",[e._v("git reset")]),e._v(" 只能从当前提交向前回溯。比如，你想用 "),a("code",[e._v("git reset")]),e._v(" 重设一个旧的提交，你不得不移除那个提交后的所有提交，再移除那个提交，然后重新提交后面的所有提交。不用说，这并不是一个优雅的回滚方案。")]),e._v(" "),a("h3",{attrs:{id:"栗子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栗子","aria-hidden":"true"}},[e._v("#")]),e._v(" 栗子")]),e._v(" "),a("p",[e._v("下面的这个栗子是 "),a("code",[e._v("git revert")]),e._v(" 一个简单的演示。它提交了一个快照，然后立即撤销这个操作。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# 编辑一些跟踪的文件\n\n# 提交一份快照\ngit commit -m "Make some changes that will be undone"\n\n# 撤销刚刚的提交\ngit revert HEAD\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("这个操作可以用下图可视化：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://www.atlassian.com/git/images/tutorials/getting-started/undoing-changes/05.svg",alt:"Git Tutorial: git revert Example"}})]),e._v(" "),a("p",[e._v("注意第四个提交在撤销后依然在项目历史中。"),a("code",[e._v("git revert")]),e._v(" 在后面增加了一个提交来撤销修改，而不是删除它。 因此，第三和第五个提交表示同样的代码，而第四个提交依然在历史中，以备以后我们想要回到这个提交。")]),e._v(" "),a("h2",{attrs:{id:"git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset","aria-hidden":"true"}},[e._v("#")]),e._v(" git reset")]),e._v(" "),a("p",[e._v("如果说 "),a("code",[e._v("git revert")]),e._v(" 是一个撤销更改安全的方式，你可以将 "),a("code",[e._v("git reset")]),e._v(" 看做一个 "),a("em",[e._v("危险")]),e._v(" 的方式。当你用 "),a("code",[e._v("git reset")]),e._v(" 来重设更改时(提交不再被任何引用或引用日志所引用)，我们无法获得原来的样子——这个撤销是永远的。使用这个工具的时候务必要小心，因为这是少数几个可能会造成工作丢失的命令之一。")]),e._v(" "),a("p",[e._v("和 "),a("code",[e._v("git checkout")]),e._v(" 一样，"),a("code",[e._v("git reset")]),e._v(" 有很多种用法。它可以被用来移除提交快照，尽管它通常被用来撤销缓存区和工作目录的修改。不管是哪种情况，它应该只被用于 "),a("em",[e._v("本地")]),e._v(" 修改——你永远不应该重设和其他开发者共享的快照。")]),e._v(" "),a("h3",{attrs:{id:"用法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 用法")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git reset <file>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("从缓存区移除特定文件，但不改变工作目录。它会取消这个文件的缓存，而不覆盖任何更改。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git reset\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("重设缓冲区，匹配最近的一次提交，但工作目录不变。它会取消 "),a("em",[e._v("所有")]),e._v(" 文件的缓存，而不会覆盖任何修改，给你了一个重设缓存快照的机会。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git reset --hard\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("重设缓冲区和工作目录，匹配最近的一次提交。除了取消缓存之外，"),a("code",[e._v("--hard")]),e._v(" 标记告诉 Git 还要重写所有工作目录中的更改。换句话说：它清除了所有未提交的更改，所以在使用前确定你想扔掉你所有本地的开发。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git reset <commit>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("将当前分支的末端移到 "),a("code",[e._v("<commit>")]),e._v("，将缓存区重设到这个提交，但不改变工作目录。所有 "),a("code",[e._v("<commit>")]),e._v(" 之后的更改会保留在工作目录中，这允许你用更干净、原子性的快照重新提交项目历史。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git reset --hard <commit>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("将当前分支的末端移到 "),a("code",[e._v("<commit>")]),e._v("，将缓存区和工作目录都重设到这个提交。它不仅清除了未提交的更改，同时还清除了 "),a("code",[e._v("<commit>")]),e._v(" 之后的所有提交。")]),e._v(" "),a("h3",{attrs:{id:"讨论-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讨论-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 讨论")]),e._v(" "),a("p",[e._v("上面所有的调用都是用来移除仓库中的修改。没有 "),a("code",[e._v("--hard")]),e._v(" 标记时 "),a("code",[e._v("git reset")]),e._v(" 通过取消缓存或取消一系列的提交，然后重新构建提交来清理仓库。而加上 "),a("code",[e._v("--hard")]),e._v(" 标记对于作了大死之后想要重头再来尤其方便。")]),e._v(" "),a("p",[e._v("撤销(revert)被设计为撤销 "),a("em",[e._v("公开")]),e._v(" 的提交的安全方式，"),a("code",[e._v("git reset")]),e._v("被设计为重设 "),a("em",[e._v("本地")]),e._v(" 更改。因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://www.atlassian.com/git/images/tutorials/getting-started/undoing-changes/06.svg",alt:"Git Tutorial: Revert vs Reset"}})]),e._v(" "),a("h4",{attrs:{id:"不要重设公共历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要重设公共历史","aria-hidden":"true"}},[e._v("#")]),e._v(" 不要重设公共历史")]),e._v(" "),a("p",[e._v("当有 "),a("code",[e._v("<commit>")]),e._v(" 之后的提交被推送到公共仓库后，你绝不应该使用 "),a("code",[e._v("git reset")]),e._v("。发布一个提交之后，你必须假设其他开发者会依赖于它。")]),e._v(" "),a("p",[e._v("移除一个其他团队成员在上面继续开发的提交在协作时会引发严重的问题。当他们试着和你的仓库同步时，他们会发现项目历史的一部分突然消失了。下面的序列展示了如果你尝试重设公共提交时会发生什么。"),a("code",[e._v("origin/master")]),e._v(" 是你本地 "),a("code",[e._v("master")]),e._v(" 分支对应的中央仓库中的分支。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wac-cdn.atlassian.com/dam/jcr:b616f03d-5257-4ea8-a6eb-db1a0207a78a/07%20(1).svg",alt:"Git Tutorial: Resetting an Public Commit"}})]),e._v(" "),a("p",[e._v("一旦你在重设之后又增加了新的提交，Git 会认为你的本地历史已经和 "),a("code",[e._v("origin/master")]),e._v(" 分叉了，同步你的仓库时的合并提交（merge commit）会使你的同事困惑。")]),e._v(" "),a("p",[e._v("重点是，确保你只对本地的修改使用 "),a("code",[e._v("git reset")]),e._v("，而不是公共更改。如果你需要修复一个公共提交，"),a("code",[e._v("git revert")]),e._v(" 命令正是被设计来做这个的。")]),e._v(" "),a("h3",{attrs:{id:"栗子-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栗子-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 栗子")]),e._v(" "),a("h4",{attrs:{id:"取消文件缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取消文件缓存","aria-hidden":"true"}},[e._v("#")]),e._v(" 取消文件缓存")]),e._v(" "),a("p",[a("code",[e._v("git reset")]),e._v(" 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，"),a("code",[e._v("hello.py")]),e._v(" 和 "),a("code",[e._v("main.py")]),e._v("它们已经被加入了仓库中。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# 编辑了hello.py和main.py\n\n# 缓存了目录下所有文件\ngit add .\n\n# 意识到hello.py和main.py中的修改\n# 应该在不同的快照中提交\n\n# 取消main.py缓存\ngit reset main.py\n\n# 只提交hello.py\ngit commit -m "Make some changes to hello.py"\n\n# 在另一份快照中提交main.py\ngit add main.py\ngit commit -m "Edit main.py"\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br")])]),a("p",[e._v("如你所见，"),a("code",[e._v("git reset")]),e._v(" 帮助你取消和这次提交无关的修改，让提交能够专注于某一特定的范围。")]),e._v(" "),a("h4",{attrs:{id:"移除本地修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除本地修改","aria-hidden":"true"}},[e._v("#")]),e._v(" 移除本地修改")]),e._v(" "),a("p",[e._v("下面的这个栗子显示了一个更高端的用法。它展示了你作了大死之后应该如何扔掉那几个更新。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# 创建一个叫`foo.py`的新文件，增加代码\n\n# 提交到项目历史\ngit add foo.py\ngit commit -m "Start developing a crazy feature"\n\n# 再次编辑`foo.py`，修改其他文件\n\n# 提交另一份快照\ngit commit -a -m "Continue my crazy feature"\n\n# 决定废弃这个功能，并删除相关的更改\ngit reset --hard HEAD~2\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[a("code",[e._v("git reset HEAD~2")]),e._v(" 命令将当前分支向前倒退两个提交，相当于在项目历史中移除刚创建的这两个提交。记住，这种重设只能用在 "),a("em",[e._v("非公开")]),e._v(" 的提交中。绝不要在将提交推送到共享仓库之后执行上面的操作。")]),e._v(" "),a("h2",{attrs:{id:"git-clean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-clean","aria-hidden":"true"}},[e._v("#")]),e._v(" git clean")]),e._v(" "),a("p",[a("code",[e._v("git clean")]),e._v(" 命令将未跟踪的文件从你的工作目录中移除。它只是提供了一条捷径，因为用 "),a("code",[e._v("git status")]),e._v(" 查看哪些文件还未跟踪然后手动移除它们也很方便。和一般的 "),a("code",[e._v("rm")]),e._v(" 命令一样，"),a("code",[e._v("git clean")]),e._v(" 是无法撤消的，所以在删除未跟踪的文件之前想清楚，你是否真的要这么做。")]),e._v(" "),a("p",[a("code",[e._v("git clean")]),e._v(" 命令经常和 "),a("code",[e._v("git reset --hard")]),e._v(" 一起使用。记住，reset 只影响被跟踪的文件，所以还需要一个单独的命令来清理未被跟踪的文件。这个两个命令相结合，你就可以将工作目录回到之前特定提交时的状态。")]),e._v(" "),a("h3",{attrs:{id:"用法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法-3","aria-hidden":"true"}},[e._v("#")]),e._v(" 用法")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clean -n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("执行一次git clean的『演习』。它会告诉你那些文件在命令执行后会被移除，而不是真的删除它。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clean -f\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("移除当前目录下未被跟踪的文件。"),a("code",[e._v("-f")]),e._v("（强制）标记是必需的，除非 "),a("code",[e._v("clean.requireForce")]),e._v(" 配置项被设为了 "),a("code",[e._v("false")]),e._v("（默认为 "),a("code",[e._v("true")]),e._v("）。它 "),a("em",[e._v("不会")]),e._v(" 删除 "),a("code",[e._v(".gitignore")]),e._v(" 中指定的未跟踪的文件。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clean -f <path>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("移除未跟踪的文件，但限制在某个路径下。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clean -df\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("移除未跟踪的文件，以及目录。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clean -xf\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("移除当前目录下未跟踪的文件，以及 Git 一般忽略的文件。")]),e._v(" "),a("h3",{attrs:{id:"讨论-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讨论-3","aria-hidden":"true"}},[e._v("#")]),e._v(" 讨论")]),e._v(" "),a("p",[e._v("如果你在本地仓库中作死之后想要毁尸灭迹，"),a("code",[e._v("git reset --hard")]),e._v(" 和 "),a("code",[e._v("git clean -f")]),e._v(" 是你最好的选择。运行这两个命令使工作目录和最近的提交相匹配，让你在干净的状态下继续工作。")]),e._v(" "),a("p",[a("code",[e._v("git clean")]),e._v(" 命令对于 build 后清理工作目录十分有用。比如，它可以轻易地删除 C 编译器生成的 "),a("code",[e._v(".o")]),e._v(" 和 "),a("code",[e._v(".exe")]),e._v(" 二进制文件。这通常是打包发布前需要的一步。"),a("code",[e._v("-x")]),e._v(" 命令在这种情况下特别方便。")]),e._v(" "),a("p",[e._v("请牢记，和 "),a("code",[e._v("git reset")]),e._v(" 一样， "),a("code",[e._v("git clean")]),e._v(" 是仅有的几个可以永久删除提交的命令之一，所以要小心使用。事实上，它太容易丢掉重要的修改了，以至于 Git 厂商 "),a("em",[e._v("强制")]),e._v(" 你用 "),a("code",[e._v("-f")]),e._v(" 标志来进行最基本的操作。这可以避免你用一个 "),a("code",[e._v("git clean")]),e._v(" 就不小心删除了所有东西。")]),e._v(" "),a("h3",{attrs:{id:"栗子-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栗子-3","aria-hidden":"true"}},[e._v("#")]),e._v(" 栗子")]),e._v(" "),a("p",[e._v("下面的栗子清除了工作目录中的所有更改，包括新建还没加入缓存的文件。它假设你已经提交了一些快照，准备开始一些新的实验。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 编辑了一些文件\n# 新增了一些文件\n# 『糟糕』\n\n# 将跟踪的文件回滚回去\ngit reset --hard\n\n# 移除未跟踪的文件\ngit clean -df\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("在执行了 reset/clean 的流程之后，工作目录和缓存区和最近一次提交看上去一模一样，而  "),a("code",[e._v("git status")]),e._v("会认为这是一个干净的工作目录。你可以重新来过了。")]),e._v(" "),a("p",[e._v("注意，不像 "),a("code",[e._v("git reset")]),e._v(" 的第二个栗子，新的文件没有被加入到仓库中。因此，它们不会受到 "),a("code",[e._v("git reset --hard")]),e._v(" 的影响，需要 "),a("code",[e._v("git clean")]),e._v(" 来删除它们。")]),e._v(" "),a("blockquote",[a("p",[e._v("这篇文章是"),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[e._v("「git-recipes」")]),a("OutboundLink")],1),e._v("的一部分，点击 "),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/wiki/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[e._v("目录")]),a("OutboundLink")],1),e._v(" 查看所有章节。")]),e._v(" "),a("p",[e._v("如果你觉得文章对你有帮助，欢迎点击右上角的 "),a("strong",[e._v("Star")]),e._v(" 🌟 或 "),a("strong",[e._v("Fork")]),e._v(" 🍴。")]),e._v(" "),a("p",[e._v("如果你发现了错误，或是想要加入协作，请参阅 "),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/issues/1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wiki 协作说明"),a("OutboundLink")],1),e._v("。")])])])},[],!1,null,null,null);t.default=r.exports}}]);