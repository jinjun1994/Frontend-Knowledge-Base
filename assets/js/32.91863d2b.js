(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{92:function(s,e,a){"use strict";a.r(e);var t=a(3),n=Object(t.a)({},function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"git-钩子：自定义你的工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-钩子：自定义你的工作流","aria-hidden":"true"}},[s._v("#")]),s._v(" Git 钩子：自定义你的工作流")]),s._v(" "),a("blockquote",[a("p",[s._v("BY 童仲毅（"),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[s._v("geeeeeeeeek@github"),a("OutboundLink")],1),s._v("）")]),s._v(" "),a("p",[s._v("这是一篇在"),a("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/git-hooks",target:"_blank",rel:"noopener noreferrer"}},[s._v("原文（BY atlassian）"),a("OutboundLink")],1),s._v("基础上演绎的译文。除非另行注明，页面上所有内容采用知识共享-署名（"),a("a",{attrs:{href:"http://creativecommons.org/licenses/by/2.5/au/deed.zh",target:"_blank",rel:"noopener noreferrer"}},[s._v("CC BY 2.5 AU"),a("OutboundLink")],1),s._v("）协议共享。")])]),s._v(" "),a("p",[s._v("Git 钩子是在 Git 仓库中特定事件发生时自动运行的脚本。它可以让你自定义 Git 内部的行为，在开发周期中的关键点触发自定义的行为。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wac-cdn.atlassian.com/dam/jcr:ac22adee-d740-4216-a92a-33c14b5623e5/01.svg",alt:"enter image description here"}})]),s._v(" "),a("p",[s._v("Git 钩子最常见的使用场景包括推行提交规范，根据仓库状态改变项目环境，和接入持续集成工作流。但是，因为脚本可以完全定制，你可以用 Git 钩子来自动化或者优化你开发工作流中任意部分。")]),s._v(" "),a("p",[s._v("在这篇文章中，我们会先简要介绍 Git 钩子是如何工作的。然后，我们会审视一些本地和远端仓库使用最流行的钩子。")]),s._v(" "),a("h1",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("Git 钩子是仓库中特定事件发生时 Git 自动运行的普通脚本。因此，Git 钩子安装和配置也非常容易。")]),s._v(" "),a("p",[s._v("钩子在本地或服务端仓库都可以部署，且只会在仓库中事件发生时被执行。在文章后面我们会具体地研究各种钩子。接下来所讲的配置对本地和服务端钩子都起作用。")]),s._v(" "),a("h3",{attrs:{id:"安装钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装钩子","aria-hidden":"true"}},[s._v("#")]),s._v(" 安装钩子")]),s._v(" "),a("p",[s._v("钩子存在于每个 Git 仓库的 "),a("code",[s._v(".git/hooks")]),s._v(" 目录中。当你初始化仓库时，Git 自动生成这个目录和一些示例脚本。当你观察 "),a("code",[s._v(".git/hooks")]),s._v(" 时，你会看到下面这些文件：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("applypatch-msg.sample       pre-push.sample\ncommit-msg.sample           pre-rebase.sample\npost-update.sample          prepare-commit-msg.sample\npre-applypatch.sample       update.sample\npre-commit.sample\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这里已经包含了大部分可用的钩子了，但是 "),a("code",[s._v(".sample")]),s._v(" 拓展名防止它们默认被执行。为了安装一个钩子，你只需要去掉 "),a("code",[s._v(".sample")]),s._v(" 拓展名。或者你要写一个新的脚本，你只需添加一个文件名和上述匹配的新文件，去掉 "),a("code",[s._v(".sample")]),s._v(" 拓展名。")]),s._v(" "),a("p",[s._v("比如说，试试安装一个 "),a("code",[s._v("prepare-commit-msg")]),s._v(" 钩子。去掉脚本的 "),a("code",[s._v(".sample")]),s._v(" 拓展名，在文件中加上下面这两行：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/sh\n\necho "# Please include a useful commit message!" > $1\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("钩子需要能被执行，所以如果你创建了一个新的脚本文件，你需要修改它的文件权限。比如说，为了确保 "),a("code",[s._v("prepare-commit-msg")]),s._v(" 可执行，运行下面这个命令：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("chmod +x prepare-commit-msg\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("接下来你每次运行 "),a("code",[s._v("git commit")]),s._v(" 时，你会看到默认的提交信息都被替换了。我们会在「准备提交信息」一节中细看它是如何工作的。现在我们已经可以定制 Git 的内部功能，你只需要坐和放宽。")]),s._v(" "),a("p",[s._v("内置的样例脚本是非常有用的参考资料，因为每个钩子传入的参数都有非常详细的说明（不同钩子不一样）。")]),s._v(" "),a("h3",{attrs:{id:"脚本语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脚本语言","aria-hidden":"true"}},[s._v("#")]),s._v(" 脚本语言")]),s._v(" "),a("p",[s._v("内置的脚本大多是  shell和 PERL 语言的，但你可以使用任何脚本语言，只要它们最后能编译到可执行文件。每次脚本中的 "),a("code",[s._v("#!/bin/sh")]),s._v(" 定义了你的文件将被如何解释。比如，使用其他语言时你只需要将 path 改为你的解释器的路径。")]),s._v(" "),a("p",[s._v("比如说，你可以在 "),a("code",[s._v("prepare-commit-msg")]),s._v(" 中写一个可执行的 Python 脚本。下面这个钩子和上一节的 shell 脚本做的事完全一样。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/usr/bin/env python\n\nimport sys, os\n\ncommit_msg_filepath = sys.argv[1]\nwith open(commit_msg_filepath, 'w') as f:\n    f.write(\"# Please include a useful commit message!\")\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("注意第一行改成了 Python 解释器的路径。此外，这里用 "),a("code",[s._v("sys.argv[1]")]),s._v(" 而不是 "),a("code",[s._v("$1")]),s._v(" 来获取第一个参数（这个也后面再讲）。")]),s._v(" "),a("p",[s._v("这个特性非常强大，因为你可以用任何你喜欢的语言来编写  Git 钩子。")]),s._v(" "),a("h3",{attrs:{id:"钩子的作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#钩子的作用域","aria-hidden":"true"}},[s._v("#")]),s._v(" 钩子的作用域")]),s._v(" "),a("p",[s._v("对于任何 Git 仓库来说钩子都是本地的，而且它不会随着 "),a("code",[s._v("git clone")]),s._v(" 一起复制到新的仓库。而且，因为钩子是本地的，任何能接触得到仓库的人都可以修改。")]),s._v(" "),a("p",[s._v("对于开发团队来说，这有很大的影响。首先，你要确保你们成员之间的钩子都是最新的。其次，你也不能强行让其他人用你喜欢的方式提交——你只能鼓励他们这样做。")]),s._v(" "),a("p",[s._v("在开发团队中维护钩子是比较复杂的，因为 "),a("code",[s._v(".git/hooks")]),s._v(" 目录不随你的项目一起拷贝，也不受版本控制影响。一个简单的解决办法是把你的钩子存在项目的实际目录中（在 "),a("code",[s._v(".git")]),s._v(" 外）。这样你就可以像其他文件一样进行版本控制。为了安装钩子，你可以在 "),a("code",[s._v(".git/hooks")]),s._v(" 中创建一个符号链接，或者简单地在更新后把它们复制到 "),a("code",[s._v(".git/hooks")]),s._v(" 目录下。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wac-cdn.atlassian.com/dam/jcr:e068ea71-a552-4d07-9917-49104f4d382e/02.svg",alt:"enter image description here"}})]),s._v(" "),a("p",[s._v("作为备选方案，Git 同样提供了一个模板目录机制来更简单地自动安装钩子。每次你使用 "),a("code",[s._v("git init")]),s._v(" 或 "),a("code",[s._v("git clone")]),s._v(" 时，模板目录文件夹下的所有文件和目录都会被复制到 "),a("code",[s._v(".git")]),s._v(" 文件夹。")]),s._v(" "),a("p",[s._v("所有的下面讲到的本地钩子都可以被更改或者彻底删除，只要你是项目的参与者。这完全取决于你的团队成员想不想用这个钩子。所以记住，最好把 Git 钩子当成一个方便的开发者工具而不是一个严格强制的开发规范。")]),s._v(" "),a("p",[s._v("也就是说，用服务端钩子来拒绝没有遵守规范的提交是完全可行的。后面我们会再讨论这个问题。")]),s._v(" "),a("h2",{attrs:{id:"本地钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地钩子","aria-hidden":"true"}},[s._v("#")]),s._v(" 本地钩子")]),s._v(" "),a("p",[s._v("本地钩子只影响它们所在的仓库。当你在读这一节的时候，记住开发者可以修改他们本地的钩子，所以不要用它们来推行强制的提交规范。不过，它们确实可以让开发者更易于接受这些规范。")]),s._v(" "),a("p",[s._v("在这一节中，我们会探讨 6 个最有用的本地钩子：")]),s._v(" "),a("ul",[a("li",[s._v("pre-commit")]),s._v(" "),a("li",[s._v("prepare-commit-msg")]),s._v(" "),a("li",[s._v("commit-msg")]),s._v(" "),a("li",[s._v("post-commit")]),s._v(" "),a("li",[s._v("post-checkout")]),s._v(" "),a("li",[s._v("pre-rebase")])]),s._v(" "),a("p",[s._v("前四个钩子让你介入完整的提交生命周期，后两个允许你执行一些额外的操作，分别为 "),a("code",[s._v("git checkout")]),s._v(" 和 "),a("code",[s._v("git rebase")]),s._v(" 的安全检查。")]),s._v(" "),a("p",[s._v("所有带 "),a("code",[s._v("pre-")]),s._v(" 的钩子允许你修改即将发生的操作，而带 "),a("code",[s._v("post-")]),s._v(" 的钩子只能用于通知。")]),s._v(" "),a("p",[s._v("我们也会看到处理钩子的参数和用底层 Git 命令获取仓库信息的实用技巧。")]),s._v(" "),a("h3",{attrs:{id:"pre-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-commit","aria-hidden":"true"}},[s._v("#")]),s._v(" pre-commit")]),s._v(" "),a("p",[a("code",[s._v("pre-commit")]),s._v(" 脚本在每次你运行 "),a("code",[s._v("git commit")]),s._v(" 命令时，Git 向你询问提交信息或者生产提交对象时被执行。你可以用这个钩子来检查即将被提交的代码快照。比如说，你可以运行一些自动化测试，保证这个提交不会破坏现有的功能。")]),s._v(" "),a("p",[a("code",[s._v("pre-commit")]),s._v(" 不需要任何参数，以非0状态退出时将放弃整个提交。让我们看一个简化了的（和更详细的）内置 "),a("code",[s._v("pre-commit")]),s._v(" 钩子。只要检测到不一致时脚本就放弃这个提交，就像 "),a("code",[s._v("git diff-index")]),s._v(" 命令定义的那样（只要词尾有空白字符、只有空白字符的行、行首一个 tab 后紧接一个空格就被认为错误）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/sh\n\n# 检查这是否是初始提交\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n    echo "pre-commit: About to create a new commit..."\n    against=HEAD\nelse\n    echo "pre-commit: About to create the first commit..."\n    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904\nfi\n\n# 使用git diff-index来检查空白字符错误\necho "pre-commit: Testing for whitespace errors..."\nif ! git diff-index --check --cached $against\nthen\n    echo "pre-commit: Aborting commit due to whitespace errors"\n    exit 1\nelse\n    echo "pre-commit: No whitespace errors :)"\n    exit 0\nfi\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("使用 "),a("code",[s._v("git diff-index")]),s._v(" 时我们要指出和哪次提交进行比较。一般来说是 HEAD，但 HEAD 在创建第一次提交时不存在，所以我们的第一个任务是解决这个极端情形。我们通过 "),a("code",[s._v("git rev-parse --verify")]),s._v(" 来检查 HEAD 是否是一个合法的引用。"),a("code",[s._v(">/dev/null 2>&1")]),s._v(" 这部分屏蔽了 "),a("code",[s._v("git rev-parse")]),s._v(" 任何输出。HEAD 或者一个新的提交对象被储存在 "),a("code",[s._v("against")]),s._v(" 变量中供 "),a("code",[s._v("git diff-index")]),s._v(" 使用。"),a("code",[s._v("4b825d...")]),s._v(" 这个哈希字串代表一个空白提交的 ID。")]),s._v(" "),a("p",[a("code",[s._v("git diff-index --cached")]),s._v(" 命令将提交和缓存区比较。通过传入 "),a("code",[s._v("-check")]),s._v(" 选项，我们要求它在更改引入空白字符错误时警告我们。如果它这么做了，我们返回状态1来放弃这次提交，否则返回状态 0，提交工作流正常进行。")]),s._v(" "),a("p",[s._v("这只是 "),a("code",[s._v("pre-commit")]),s._v(" 的其中一个例子。它恰好使用了已有的 Git 命令来根据提交带来的更改进行测试，但你可以在 "),a("code",[s._v("pre-commit")]),s._v(" 中做任何你想做的事，比如执行其它脚本、运行第三方测试集、用 Lint 检查代码风格。")]),s._v(" "),a("h3",{attrs:{id:"prepare-commit-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prepare-commit-msg","aria-hidden":"true"}},[s._v("#")]),s._v(" prepare-commit-msg")]),s._v(" "),a("p",[a("code",[s._v("prepare-commit-msg")]),s._v(" 钩子在 "),a("code",[s._v("pre-commit")]),s._v(" 钩子在文本编辑器中生成提交信息之后被调用。这被用来方便地修改自动生成的 squash 或 merge 提交。")]),s._v(" "),a("p",[a("code",[s._v("prepare-commit-msg")]),s._v(" 脚本的参数可以是下列三个：")]),s._v(" "),a("ul",[a("li",[s._v("包含提交信息的文件名。你可以在原地更改提交信息。")]),s._v(" "),a("li",[s._v("提交类型。可以是信息（"),a("code",[s._v("-m")]),s._v(" 或 "),a("code",[s._v("-F")]),s._v(" 选项），模板（"),a("code",[s._v("-t")]),s._v(" 选项），merge（如果是个合并提交）或 squash（如果这个提交插入了其他提交）。")]),s._v(" "),a("li",[s._v("相关提交的 SHA1 哈希字串。只有当 "),a("code",[s._v("-c")]),s._v("、"),a("code",[s._v("-C")]),s._v(" 或 "),a("code",[s._v("--amend")]),s._v(" 选项出现时才需要。")])]),s._v(" "),a("p",[s._v("和 "),a("code",[s._v("pre-commit")]),s._v(" 一样，以非0状态退出会放弃提交。")]),s._v(" "),a("p",[s._v("我们已经看过一个修改提交信息的简单例子，现在我们来看一个更有用的脚本。使用 issue 跟踪器时，我们通常在单独的分支上处理 issue。如果你在分支名中包含了 issue 编号，你可以使用 "),a("code",[s._v("prepare-commit-msg")]),s._v(" 钩子来自动地将它包括在那个分支的每个提交信息中。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/usr/bin/env python\n\nimport sys, os, re\nfrom subprocess import check_output\n\n# 收集参数\ncommit_msg_filepath = sys.argv[1]\nif len(sys.argv) > 2:\n    commit_type = sys.argv[2]\nelse:\n    commit_type = ''\nif len(sys.argv) > 3:\n    commit_hash = sys.argv[3]\nelse:\n    commit_hash = ''\n\nprint \"prepare-commit-msg: File: %s\\nType: %s\\nHash: %s\" % (commit_msg_filepath, commit_type, commit_hash)\n\n# 检测我们所在的分支\nbranch = check_output(['git', 'symbolic-ref', '--short', 'HEAD']).strip()\nprint \"prepare-commit-msg: On branch '%s'\" % branch\n\n# 用issue编号生成提交信息\nif branch.startswith('issue-'):\n    print \"prepare-commit-msg: Oh hey, it's an issue branch.\"\n    result = re.match('issue-(.*)', branch)\n    issue_number = result.group(1)\n\n    with open(commit_msg_filepath, 'r+') as f:\n        content = f.read()\n        f.seek(0, 0)\n        f.write(\"ISSUE-%s %s\" % (issue_number, content))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("p",[s._v("首先，上面的 "),a("code",[s._v("prepare-commit-msg")]),s._v(" 钩子告诉你如何收集传入脚本的所有参数。接下来，它调用了 "),a("code",[s._v("git symbolic-ref --short HEAD")]),s._v(" 来获取对应 HEAD 的分支名。如果分支名以 "),a("code",[s._v("issue-")]),s._v(" 开头，它会重写提交信息文件，在第一行加上 issue 编号。比如你的分支名 "),a("code",[s._v("issue-224")]),s._v("，下面的提交信息将会生成：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ISSUE-224\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch issue-224\n# Changes to be committed:\n#   modified:   test.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("有一点要记住的是即使用户用 "),a("code",[s._v("-m")]),s._v(" 传入提交信息，"),a("code",[s._v("prepare-commit-msg")]),s._v(" 也会运行。也就是说，上面这个脚本会自动插入 "),a("code",[s._v("ISSUE-[#]")]),s._v(" 字符串，而用户无法更改。你可以检查第二个参数是否是提交类型来处理这个情况。")]),s._v(" "),a("p",[s._v("但是，如果没有 "),a("code",[s._v("-m")]),s._v(" 选项，"),a("code",[s._v("prepare-commit-msg")]),s._v(" 钩子允许用户修改生成后的提交信息。所以脚本的目的是为了方便，而不是推行强制的提交信息规范。如果你要这么做，你需要下一节所讲的 "),a("code",[s._v("commit-msg")]),s._v(" 钩子。")]),s._v(" "),a("h3",{attrs:{id:"commit-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-msg","aria-hidden":"true"}},[s._v("#")]),s._v(" commit-msg")]),s._v(" "),a("p",[a("code",[s._v("commit-msg")]),s._v(" 钩子和 "),a("code",[s._v("prepare-commit-msg")]),s._v(" 钩子很像，但它会在用户输入提交信息之后被调用。这适合用来提醒开发者他们的提交信息不符合你团队的规范。")]),s._v(" "),a("p",[s._v("传入这个钩子唯一的参数是包含提交信息的文件名。如果它不喜欢用户输入的提交信息，它可以在原地修改这个文件（和 "),a("code",[s._v("prepare-commit-msg")]),s._v(" 一样），或者它会以非 0 状态退出，放弃这个提交。")]),s._v(" "),a("p",[s._v("比如说，下面这个脚本确认用户没有删除 "),a("code",[s._v("prepare-commit-msg")]),s._v(" 脚本自动生成的 "),a("code",[s._v("ISSUE-[#]")]),s._v(" 字符串。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/usr/bin/env python\n\nimport sys, os, re\nfrom subprocess import check_output\n\n# 收集参数\ncommit_msg_filepath = sys.argv[1]\n\n# 检测所在的分支\nbranch = check_output(['git', 'symbolic-ref', '--short', 'HEAD']).strip()\nprint \"commit-msg: On branch '%s'\" % branch\n\n# 检测提交信息，判断是否是一个issue提交\nif branch.startswith('issue-'):\n    print \"commit-msg: Oh hey, it's an issue branch.\"\n    result = re.match('issue-(.*)', branch)\n    issue_number = result.group(1)\n    required_message = \"ISSUE-%s\" % issue_number\n\n    with open(commit_msg_filepath, 'r') as f:\n        content = f.read()\n        if not content.startswith(required_message):\n            print \"commit-msg: ERROR! The commit message must start with '%s'\" % required_message\n            sys.exit(1)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("虽然用户每次创建提交时，这个脚本都会运行。但你还是应该避免做检查提交信息之外的事情。如果你需要通知其他服务一个快照已经被提交了，你应该使用 "),a("code",[s._v("post-commit")]),s._v(" 这个钩子。")]),s._v(" "),a("h3",{attrs:{id:"post-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-commit","aria-hidden":"true"}},[s._v("#")]),s._v(" post-commit")]),s._v(" "),a("p",[a("code",[s._v("post-commit")]),s._v(" 钩子在 "),a("code",[s._v("commit-msg")]),s._v(" 钩子之后立即被运行 。它无法更改 "),a("code",[s._v("git commit")]),s._v(" 的结果，所以这主要用于通知用途。")]),s._v(" "),a("p",[s._v("这个脚本没有参数，而且退出状态不会影响提交。对于大多数 "),a("code",[s._v("post-commit")]),s._v(" 脚本来说，你只是想访问你刚刚创建的提交。你可以用 "),a("code",[s._v("git rev-parse HEAD")]),s._v(" 来获得最近一次提交的SHA1哈希字串，或者你可以用 "),a("code",[s._v("git log -l HEAD")]),s._v(" 获取完整的信息。")]),s._v(" "),a("p",[s._v("比如说，如果你需要每次提交快照时向老板发封邮件（也许对于大多数工作流来说这不是个好的想法），你可以加上下面这个 "),a("code",[s._v("post-commit")]),s._v(" 钩子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/usr/bin/env python\n\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom subprocess import check_output\n\n# 获得新提交的git log --stat输出\nlog = check_output(['git', 'log', '-1', '--stat', 'HEAD'])\n\n# 创建一个纯文本的邮件内容\nmsg = MIMEText(\"Look, I'm actually doing some work:\\n\\n%s\" % log)\n\nmsg['Subject'] = 'Git post-commit hook notification'\nmsg['From'] = 'mary@example.com'\nmsg['To'] = 'boss@example.com'\n\n# 发送信息\nSMTP_SERVER = 'smtp.example.com'\nSMTP_PORT = 587\n\nsession = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\nsession.ehlo()\nsession.starttls()\nsession.ehlo()\nsession.login(msg['From'], 'secretPassword')\n\nsession.sendmail(msg['From'], msg['To'], msg.as_string())\nsession.quit()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("你虽然可以用 "),a("code",[s._v("post-commit")]),s._v(" 来触发本地的持续集成系统，但大多数时候你想用的是 "),a("code",[s._v("post-receive")]),s._v(" 这个钩子。它运行在服务端而不是用户的本地机器，它同样在任何开发者推送代码时运行。那里更适合你进行持续集成。")]),s._v(" "),a("h3",{attrs:{id:"post-checkout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-checkout","aria-hidden":"true"}},[s._v("#")]),s._v(" post-checkout")]),s._v(" "),a("p",[a("code",[s._v("post-checkout")]),s._v(" 钩子和 "),a("code",[s._v("post-commit")]),s._v(" 钩子很像，但它在你用 "),a("code",[s._v("git checkout")]),s._v(" 查看引用的时候被调用。这是用来清理你的工作目录中可能会令人困惑的生成文件。")]),s._v(" "),a("p",[s._v("这个钩子接受三个参数，它的返回状态不影响 "),a("code",[s._v("git checkout")]),s._v(" 命令。")]),s._v(" "),a("ul",[a("li",[s._v("HEAD 前一次提交的引用")]),s._v(" "),a("li",[s._v("新的 HEAD 的引用")]),s._v(" "),a("li",[s._v("1 或 0，分别代表是分支 checkout 还是文件 checkout。")])]),s._v(" "),a("p",[s._v("Python 程序员经常遇到的问题是切换分支后那些之前生成的 "),a("code",[s._v(".pyc")]),s._v(" 文件。解释器有时使用 "),a("code",[s._v(".pyc")]),s._v(" 而不是 "),a("code",[s._v(".py")]),s._v(" 文件。为了避免歧义，你可以在每次用 "),a("code",[s._v("post-checkout")]),s._v(" 切换到新的分支的时候，删除所有 "),a("code",[s._v(".pyc")]),s._v(" 文件。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/usr/bin/env python\n\nimport sys, os, re\nfrom subprocess import check_output\n\n# 收集参数\nprevious_head = sys.argv[1]\nnew_head = sys.argv[2]\nis_branch_checkout = sys.argv[3]\n\nif is_branch_checkout == \"0\":\n    print \"post-checkout: This is a file checkout. Nothing to do.\"\n    sys.exit(0)\n\nprint \"post-checkout: Deleting all '.pyc' files in working directory\"\nfor root, dirs, files in os.walk('.'):\n    for filename in files:\n        ext = os.path.splitext(filename)[1]\n        if ext == '.pyc':\n            os.unlink(os.path.join(root, filename))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("钩子脚本当前的工作目录总是位于仓库的根目录下，所以 "),a("code",[s._v("os.walk('.')")]),s._v(" 调用遍历了仓库中所有文件。接下来，我们检查它的拓展名，如果是 "),a("code",[s._v(".pyc")]),s._v(" 就删除它。")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("post-checkout")]),s._v(" 钩子，你还可以根据你切换的分支来来更改工作目录。比如说，你可以在代码库外面使用一个插件分支来储存你所有的插件。如果这些插件需要很多二进制文件而其他分支不需要，你可以选择只在插件分支上 build。")]),s._v(" "),a("h3",{attrs:{id:"pre-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-rebase","aria-hidden":"true"}},[s._v("#")]),s._v(" pre-rebase")]),s._v(" "),a("p",[a("code",[s._v("pre-rebase")]),s._v(" 钩子在 "),a("code",[s._v("git rebase")]),s._v(" 发生更改之前运行，确保不会有什么糟糕的事情发生。")]),s._v(" "),a("p",[s._v("这个钩子有两个参数：fork 之前的上游分支，将要 rebase 的下游分支。如果 rebase 当前分支则第二个参数为空。以非 0 状态退出会放弃这次 rebase。")]),s._v(" "),a("p",[s._v("比如说，如果你想彻底禁用 rebase 操作，你可以使用下面的 "),a("code",[s._v("pre-rebase")]),s._v(" 脚本：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/bin/sh\n\n# 禁用所有rebase\necho "pre-rebase: Rebasing is dangerous. Don\'t do it."\nexit 1\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("每次运行 "),a("code",[s._v("git rebase")]),s._v("，你都会看到下面的信息：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("pre-rebase: Rebasing is dangerous. Don't do it.\nThe pre-rebase hook refused to rebase.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("内置的 "),a("code",[s._v("pre-rebase.sample")]),s._v(" 脚本是一个更复杂的例子。它在何时阻止 rebase 这方面更加智能。它会检查你当前的分支是否已经合并到了下一个分支中去（也就是主分支）。如果是的话，rebase 可能会遇到问题，脚本会放弃这次 rebase。")]),s._v(" "),a("h1",{attrs:{id:"服务端钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端钩子","aria-hidden":"true"}},[s._v("#")]),s._v(" 服务端钩子")]),s._v(" "),a("p",[s._v("服务端钩子和本地钩子几乎一样，只不过它们存在于服务端的仓库中（比如说中心仓库，或者开发者的公共仓库）。当和官方仓库连接时，其中一些可以用来拒绝一些不符合规范的提交。")]),s._v(" "),a("p",[s._v("这节中我们要讨论下面三个服务端钩子：")]),s._v(" "),a("ul",[a("li",[s._v("pre-receive")]),s._v(" "),a("li",[s._v("update")]),s._v(" "),a("li",[s._v("post-receive")])]),s._v(" "),a("p",[s._v("这些钩子都允许你对 "),a("code",[s._v("git push")]),s._v(" 的不同阶段做出响应。")]),s._v(" "),a("p",[s._v("服务端钩子的输出会传送到客户端的控制台中，所以给开发者发送信息是很容易的。但你要记住这些脚本在结束完之前都不会返回控制台的控制权，所以你要小心那些长时间运行的操作。")]),s._v(" "),a("h3",{attrs:{id:"pre-receive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-receive","aria-hidden":"true"}},[s._v("#")]),s._v(" pre-receive")]),s._v(" "),a("p",[a("code",[s._v("pre-receive")]),s._v(" 钩子在有人用 "),a("code",[s._v("git push")]),s._v(" 向仓库推送代码时被执行。它只存在于远端仓库中，而不是原来的仓库中。")]),s._v(" "),a("p",[s._v("这个钩子在任意引用被更新前被执行，所以这是强制推行开发规范的好地方。如果你不喜欢推送的那个人（多大仇 = =），提交信息的格式，或者提交的更改，你都可以拒绝这次提交。虽然你不能阻止开发者写出糟糕的代码，但你可以用 "),a("code",[s._v("pre-receive")]),s._v(" 防止这些代码流入官方的代码库。")]),s._v(" "),a("p",[s._v("这个脚本没有参数，但每一个推送上来的引用都会以下面的格式传入脚本的单独一行：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<old-value> <new-value> <ref-name>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("你可以看到这个钩子做了非常简单的事，就是读取推送上来的引用并且把它们打印出来。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#!/usr/bin/env python\n\nimport sys\nimport fileinput\n\n# 读取用户试图更新的所有引用\nfor line in fileinput.input():\n    print "pre-receive: Trying to push ref: %s" % line\n\n# 放弃推送\n# sys.exit(1)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("这和其它钩子相比略微有些不同，因为信息是通过标准输入而不是命令行传入的。在远端仓库的 "),a("code",[s._v(".git/hooks")]),s._v(" 中加上这个脚本，推送到 master 分支，你会看到下面这些信息打印出来：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("b6b36c697eb2d24302f89aa22d9170dfe609855b 85baa88c22b52ddd24d71f05db31f4e46d579095 refs/heads/master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("你可以用 SHA1 哈希字串，或者底层的 Git 命令，来检查将要引入的更改。一些常见的使用包括：")]),s._v(" "),a("ul",[a("li",[s._v("拒绝将上游分支 rebase 的更改")]),s._v(" "),a("li",[s._v("防止错综复杂的合并（非快速向前，会造成项目历史非线性）")]),s._v(" "),a("li",[s._v("检查用户是否有正确的权限来做这些更改（大多用于中心化的 Git 工作流中）")]),s._v(" "),a("li",[s._v("如果多个引用被推送，在 "),a("code",[s._v("pre-receive")]),s._v(" 中返回非 0 状态，拒绝所有提交。如果你想一个个接受或拒绝分支，你需要使用 "),a("code",[s._v("update")]),s._v(" 钩子")])]),s._v(" "),a("h3",{attrs:{id:"update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update","aria-hidden":"true"}},[s._v("#")]),s._v(" update")]),s._v(" "),a("p",[a("code",[s._v("update")]),s._v(" 钩子在 "),a("code",[s._v("pre-receive")]),s._v(" 之后被调用，用法也差不多。它也是在实际更新前被调用的，但它可以分别被每个推送上来的引用分别调用。也就是说如果用户尝试推送到4个分支，"),a("code",[s._v("update")]),s._v(" 会被执行 4 次。和 "),a("code",[s._v("pre-receive")]),s._v(" 不一样，这个钩子不需要读取标准输入。事实上，它接受三个参数：")]),s._v(" "),a("ul",[a("li",[s._v("更新的引用名称")]),s._v(" "),a("li",[s._v("引用中存放的旧的对象名称")]),s._v(" "),a("li",[s._v("引用中存放的新的对象名称")])]),s._v(" "),a("p",[s._v("这些信息和 "),a("code",[s._v("pre-receive")]),s._v(" 相同，但因为每次引用都会分别触发更新，你可以拒绝一些引用而接受另一些。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/usr/bin/env python\n\nimport sys\n\nbranch = sys.argv[1]\nold_commit = sys.argv[2]\nnew_commit = sys.argv[3]\n\nprint \"Moving '%s' from %s to %s\" % (branch, old_commit, new_commit)\n\n# 只放弃当前分支的推送\n# sys.exit(1)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("上面这个钩子简单地输出了分支和新旧提交的哈希字串。当你向远程仓库推送超过一个分支时，你可以看到每个分支都有输出。")]),s._v(" "),a("h3",{attrs:{id:"post-receive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-receive","aria-hidden":"true"}},[s._v("#")]),s._v(" post-receive")]),s._v(" "),a("p",[a("code",[s._v("post-receive")]),s._v(" 钩子在成功推送后被调用，适合用于发送通知。对很多工作流来说，这是一个比 "),a("code",[s._v("post-commit")]),s._v(" 更好的发送通知的地方，因为这些更改在公共的服务器而不是用户的本地机器上。给其他开发者发送邮件或者触发一个持续集成系统都是 "),a("code",[s._v("post-receive")]),s._v(" 常用的操作。")]),s._v(" "),a("p",[s._v("这个脚本没有参数，但和 "),a("code",[s._v("pre-receive")]),s._v(" 一样通过标准输入读取。")]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("在这篇文章中，我们学习了如果用 Git 钩子来修改内部行为，当仓库中特定的事件发生时接受消息。钩子是存在于 "),a("code",[s._v("git/hooks")]),s._v(" 仓库中的普通脚本，因此也非常容易安装和定制。")]),s._v(" "),a("p",[s._v("我们还看了一些常用的本地和服务端的钩子。这使得我们能够介入到整个开发生命周期中去。我们现在知道了如何在创建提交或推送的每个阶段执行自定义的操作。有了这些简单的脚本知识，你就可以对 Git 仓库为所欲为了 :]")]),s._v(" "),a("blockquote",[a("p",[s._v("这篇文章是"),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[s._v("「git-recipes」")]),a("OutboundLink")],1),s._v("的一部分，点击 "),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/wiki/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[s._v("目录")]),a("OutboundLink")],1),s._v(" 查看所有章节。")]),s._v(" "),a("p",[s._v("如果你觉得文章对你有帮助，欢迎点击右上角的 "),a("strong",[s._v("Star")]),s._v(" 🌟 或 "),a("strong",[s._v("Fork")]),s._v(" 🍴。")]),s._v(" "),a("p",[s._v("如果你发现了错误，或是想要加入协作，请参阅 "),a("a",{attrs:{href:"https://github.com/geeeeeeeeek/git-recipes/issues/1",target:"_blank",rel:"noopener noreferrer"}},[s._v("Wiki 协作说明"),a("OutboundLink")],1),s._v("。")])])])},[],!1,null,null,null);e.default=n.exports}}]);